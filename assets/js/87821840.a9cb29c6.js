"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[850],{7898:(e,t,n)=>{n.d(t,{PM:()=>s,Py:()=>m,VY:()=>l,W7:()=>u,lh:()=>c,mL:()=>o,vR:()=>i});var r=n(7294),a=n(614);function l(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, BX ",r.createElement("br",null),e.instructionName," BL, CH"),r.createElement("hr",null))}function i(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a constant."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, 0FFh ",r.createElement("br",null),e.instructionName," BX, 0Bh ",r.createElement("br",null),e.instructionName," CL, 0h"),r.createElement("hr",null))}function s(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [0x100] ",r.createElement("br",null),e.instructionName," AL, b.[0x100] ",r.createElement("br",null)),"(or) Alternatively you can specify the memory location using the `variable assignment`",r.createElement("p",null,"Example"),r.createElement(a.Z,{language:"asm6502"},"ORG 100h ",r.createElement("br",null),".DATA ",r.createElement("br",null),"    VAR1 DB 0FFh"," ",r.createElement("br",null),"    VAR2 DW 0Bh"," ",r.createElement("br",null)," ",r.createElement("br",null),"CODE: ",r.createElement("br",null),`    ${e.instructionName} AL, Var1`," ",r.createElement("br",null),`    ${e.instructionName} BX, Var2`," ",r.createElement("br",null),`    ${e.instructionName} CL, b.[Var2]`," ",r.createElement("br",null),`    ${e.instructionName} DX, w.[Var1]`," ",r.createElement("br",null)),r.createElement("hr",null))}function o(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [BX] ",r.createElement("br",null),e.instructionName," AL, b.[BX] ",r.createElement("br",null)),r.createElement("hr",null))}function m(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI] ",r.createElement("br",null)),r.createElement("hr",null))}function c(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset and a displacement."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI+10h] ",r.createElement("br",null),e.instructionName," AX, [BX+SI+100h] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI+10h] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI+100h] ",r.createElement("br",null)),r.createElement("hr",null))}function u(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified as a register while the other operand is specified as a memory location. The second operand is a memory location whose address is contained in a register (or) an offset. The second operand might also have an displacement."),r.createElement("p",null,"Example: "),r.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},"org 100h ",r.createElement("br",null),"data ",r.createElement("br",null),"    VAR DB 0FFh"," ",r.createElement("br",null),"    VAR2 DW 0Bh"," ",r.createElement("br",null),"code: ",r.createElement("br",null),`    ${e.instructionName} BX, Var `,r.createElement("br",null),`    ${e.instructionName} BX, w.[Var] `,r.createElement("br",null),`    ${e.instructionName} BX, w.[Var2] `,r.createElement("br",null)," ",r.createElement("br",null),`    ${e.instructionName} AX, [BX] `,r.createElement("br",null),`    ${e.instructionName} DX, [BX+SI] `,r.createElement("br",null),`    ${e.instructionName} SP, [BX+SI+10h] `,r.createElement("br",null),`    ${e.instructionName} DI, [BX+SI+100h] `,r.createElement("br",null)))}},2489:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905)),l=n(7898);const i={title:"LES",description:"Loads the value in the effective address into the destination register & Loads ES with the next word."},s=void 0,o={unversionedId:"Instructions/LES",id:"Instructions/LES",title:"LES",description:"Loads the value in the effective address into the destination register & Loads ES with the next word.",source:"@site/docs/Instructions/LES.mdx",sourceDirName:"Instructions",slug:"/Instructions/LES",permalink:"/emu_8086/docs/Instructions/LES",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/LES.mdx",tags:[],version:"current",frontMatter:{title:"LES",description:"Loads the value in the effective address into the destination register & Loads ES with the next word."},sidebar:"tutorialSidebar",previous:{title:"LEA",permalink:"/emu_8086/docs/Instructions/LEA"},next:{title:"MOV",permalink:"/emu_8086/docs/Instructions/MOV"}},m={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register And Memory",id:"register-and-memory",level:3}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm6502"},"LES operand1, operand2\n")),(0,a.kt)("h2",{id:"attributes"},"Attributes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Operands")),(0,a.kt)("td",{parentName:"tr",align:null},"The destination operand is a general-purpose register. The source operand is a memory location.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Operation")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"DEST \u2190 SRC; ES \u2190 SRC+2"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Size")),(0,a.kt)("td",{parentName:"tr",align:null},"2 (to) 6 bytes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Action")),(0,a.kt)("td",{parentName:"tr",align:null},"Performs Memory Indirect Read and puts the value in the memory location into the destination register. Loads ES with the next word.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Flags")),(0,a.kt)("td",{parentName:"tr",align:null},"None")))),(0,a.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,a.kt)("h3",{id:"register-and-memory"},"Register And Memory"),(0,a.kt)(l.W7,{instructionName:"LES",mdxType:"RegisterAndMemoryAddressing"}))}p.isMDXComponent=!0}}]);