"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[243],{7898:(e,t,n)=>{n.d(t,{PM:()=>i,Py:()=>d,VY:()=>l,W7:()=>c,lh:()=>m,mL:()=>o,vR:()=>s});var a=n(7294),r=n(614);function l(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register."),a.createElement("p",null,"Example:"),a.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, BX ",a.createElement("br",null),e.instructionName," BL, CH"),a.createElement("hr",null))}function s(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a constant."),a.createElement("p",null,"Example:"),a.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, 0FFh ",a.createElement("br",null),e.instructionName," BX, 0Bh ",a.createElement("br",null),e.instructionName," CL, 0h"),a.createElement("hr",null))}function i(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location."),a.createElement("p",null,"Example:"),a.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, [0x100] ",a.createElement("br",null),e.instructionName," AL, b.[0x100] ",a.createElement("br",null)),"(or) Alternatively you can specify the memory location using the `variable assignment`",a.createElement("p",null,"Example"),a.createElement(r.Z,{language:"asm6502"},"ORG 100h ",a.createElement("br",null),".DATA ",a.createElement("br",null),"    VAR1 DB 0FFh"," ",a.createElement("br",null),"    VAR2 DW 0Bh"," ",a.createElement("br",null)," ",a.createElement("br",null),"CODE: ",a.createElement("br",null),`    ${e.instructionName} AL, Var1`," ",a.createElement("br",null),`    ${e.instructionName} BX, Var2`," ",a.createElement("br",null),`    ${e.instructionName} CL, b.[Var2]`," ",a.createElement("br",null),`    ${e.instructionName} DX, w.[Var1]`," ",a.createElement("br",null)),a.createElement("hr",null))}function o(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register."),a.createElement("p",null,"Example:"),a.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, [BX] ",a.createElement("br",null),e.instructionName," AL, b.[BX] ",a.createElement("br",null)),a.createElement("hr",null))}function d(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset."),a.createElement("p",null,"Example:"),a.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI] ",a.createElement("br",null),e.instructionName," AL, b.[BX+SI] ",a.createElement("br",null)),a.createElement("hr",null))}function m(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset and a displacement."),a.createElement("p",null,"Example:"),a.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI+10h] ",a.createElement("br",null),e.instructionName," AX, [BX+SI+100h] ",a.createElement("br",null),e.instructionName," AL, b.[BX+SI+10h] ",a.createElement("br",null),e.instructionName," AL, b.[BX+SI+100h] ",a.createElement("br",null)),a.createElement("hr",null))}function c(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified as a register while the other operand is specified as a memory location. The second operand is a memory location whose address is contained in a register (or) an offset. The second operand might also have an displacement."),a.createElement("p",null,"Example: "),a.createElement(r.Z,{language:"asm6502",showLineNumbers:!0},"org 100h ",a.createElement("br",null),"data ",a.createElement("br",null),"    VAR DB 0FFh"," ",a.createElement("br",null),"    VAR2 DW 0Bh"," ",a.createElement("br",null),"code: ",a.createElement("br",null),`    ${e.instructionName} BX, Var `,a.createElement("br",null),`    ${e.instructionName} BX, w.[Var] `,a.createElement("br",null),`    ${e.instructionName} BX, w.[Var2] `,a.createElement("br",null)," ",a.createElement("br",null),`    ${e.instructionName} AX, [BX] `,a.createElement("br",null),`    ${e.instructionName} DX, [BX+SI] `,a.createElement("br",null),`    ${e.instructionName} SP, [BX+SI+10h] `,a.createElement("br",null),`    ${e.instructionName} DI, [BX+SI+100h] `,a.createElement("br",null)))}},3749:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294);const r={tooltip:"tooltip_OfI_",tooltiptext:"tooltiptext_kMd9",bottomTooltiptext:"bottomTooltiptext_PBXK"};function l(e){let{children:t,text:n,toolTipPosition:l="top"}=e;const s="top"===l?r.tooltiptext:r.bottomTooltiptext;return a.createElement("div",{className:r.tooltip},t,a.createElement("span",{className:s},n))}const s=e=>{let{state:t}=e;return"changed"===t?a.createElement("span",{className:"badge badge--primary badge--rounded h-20"},a.createElement("span",{className:"badge__text"},a.createElement(l,{text:"Changes"},"C"))):"unchanged"===t?a.createElement("span",{className:"badge badge--secondary badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(l,{text:"Doesn't change"},"NC"))):1==t?a.createElement("span",{className:"badge badge--success badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(l,{text:"Changed to 1"},"1"))):0==t?a.createElement("span",{className:"badge badge--danger badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(l,{text:"Changed to 0"},"0"))):a.createElement("span",{className:"badge badge--warning badge--rounded"},a.createElement("span",{className:"badge__text"},"Unknown"))};function i(e){let{carryFlag:t=null,zeroFlag:n=null,signFlag:r=null,overflowFlag:i=null,parityFlag:o=null,auxiliaryCarryFlag:d=null}=e;const m={carryFlag:t,zeroFlag:n,signFlag:r,overflowFlag:i,parityFlag:o,auxiliaryCarryFlag:d};return a.createElement("table",{className:"table table--striped table--responsive"},a.createElement("thead",null,a.createElement("tr",null,Object.entries(m).map((e=>{let[t,n]=e;return null==n?null:a.createElement("th",null,a.createElement(l,{text:t,toolTipPosition:"bottom"},t[0].toUpperCase()))})))),a.createElement("tbody",null,a.createElement("tr",null,Object.values(m).map((e=>null==e?null:a.createElement("td",null,a.createElement(s,{state:e})))))))}},9802:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),l=n(3749),s=n(7898);const i={title:"AND",description:"Performs a bitwise AND operation on the two operands and stores the result in first operand."},o=void 0,d={unversionedId:"Instructions/AND",id:"Instructions/AND",title:"AND",description:"Performs a bitwise AND operation on the two operands and stores the result in first operand.",source:"@site/docs/Instructions/AND.mdx",sourceDirName:"Instructions",slug:"/Instructions/AND",permalink:"/emu_8086/docs/Instructions/AND",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/AND.mdx",tags:[],version:"current",frontMatter:{title:"AND",description:"Performs a bitwise AND operation on the two operands and stores the result in first operand."},sidebar:"tutorialSidebar",previous:{title:"Instructions",permalink:"/emu_8086/docs/category/instructions"},next:{title:"LEA",permalink:"/emu_8086/docs/Instructions/LEA"}},m={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register Addressing",id:"register-addressing",level:3},{value:"Immediate Addressing Mode",id:"immediate-addressing-mode",level:3},{value:"MemoryAddressingMode",id:"memoryaddressingmode",level:3},{value:"RegisterIndirectAddressingMode",id:"registerindirectaddressingmode",level:3},{value:"BasePlusIndexedAddressingMode",id:"baseplusindexedaddressingmode",level:3},{value:"BasePlusIndexPlusDisplacementAddressingMode",id:"baseplusindexplusdisplacementaddressingmode",level:3}],u={toc:c},p="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asm6502"},"AND operand1, operand2\n")),(0,r.kt)("h2",{id:"attributes"},"Attributes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Size")),(0,r.kt)("td",{parentName:"tr",align:null},"Byte, Word, Doubleword, 3 Bytes, 5 Bytes (or) 6 Bytes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Operands")),(0,r.kt)("td",{parentName:"tr",align:null},"The first operand is a general-purpose register or memory location. The second operand is a general-purpose register, memory location, or immediate value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Action")),(0,r.kt)("td",{parentName:"tr",align:null},"Performs a bitwise AND operation on the two operands. The result is saved in first operand.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Flags")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(l.Z,{carryFlag:!1,overflowFlag:!1,zeroFlag:"changed",signFlag:"changed",parityFlag:"changed",mdxType:"FlagsChangedTable"}))))),(0,r.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,r.kt)("h3",{id:"register-addressing"},"Register Addressing"),(0,r.kt)(s.VY,{instructionName:"AND",mdxType:"RegisterAddressingMode"}),(0,r.kt)("h3",{id:"immediate-addressing-mode"},"Immediate Addressing Mode"),(0,r.kt)(s.vR,{instructionName:"AND",mdxType:"ImmediateAddressingMode"}),(0,r.kt)("h3",{id:"memoryaddressingmode"},"MemoryAddressingMode"),(0,r.kt)(s.PM,{instructionName:"AND",mdxType:"MemoryAddressingMode"}),(0,r.kt)("h3",{id:"registerindirectaddressingmode"},"RegisterIndirectAddressingMode"),(0,r.kt)(s.mL,{instructionName:"AND",mdxType:"RegisterIndirectAddressingMode"}),(0,r.kt)("h3",{id:"baseplusindexedaddressingmode"},"BasePlusIndexedAddressingMode"),(0,r.kt)(s.Py,{instructionName:"AND",mdxType:"BasePlusIndexedAddressingMode"}),(0,r.kt)("h3",{id:"baseplusindexplusdisplacementaddressingmode"},"BasePlusIndexPlusDisplacementAddressingMode"),(0,r.kt)(s.lh,{instructionName:"AND",mdxType:"BasePlusIndexPlusDisplacementAddressingMode"}))}g.isMDXComponent=!0}}]);