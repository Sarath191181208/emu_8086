"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1900],{3749:(e,t,a)=>{a.d(t,{Z:()=>d});var r=a(7294);const n={tooltip:"tooltip_OfI_",tooltiptext:"tooltiptext_kMd9",bottomTooltiptext:"bottomTooltiptext_PBXK"};function i(e){let{children:t,text:a,toolTipPosition:i="top"}=e;const l="top"===i?n.tooltiptext:n.bottomTooltiptext;return r.createElement("div",{className:n.tooltip},t,r.createElement("span",{className:l},a))}const l=e=>{let{state:t}=e;return"changed"===t?r.createElement("span",{className:"badge badge--primary badge--rounded h-20"},r.createElement("span",{className:"badge__text"},r.createElement(i,{text:"Changes"},"C"))):"unchanged"===t?r.createElement("span",{className:"badge badge--secondary badge--rounded"},r.createElement("span",{className:"badge__text"},r.createElement(i,{text:"Doesn't change"},"NC"))):1==t?r.createElement("span",{className:"badge badge--success badge--rounded"},r.createElement("span",{className:"badge__text"},r.createElement(i,{text:"Changed to 1"},"1"))):0==t?r.createElement("span",{className:"badge badge--danger badge--rounded"},r.createElement("span",{className:"badge__text"},r.createElement(i,{text:"Changed to 0"},"0"))):r.createElement("span",{className:"badge badge--warning badge--rounded"},r.createElement("span",{className:"badge__text"},"Unknown"))};function d(e){let{carryFlag:t=null,zeroFlag:a=null,signFlag:n=null,overflowFlag:d=null,parityFlag:s=null,auxiliaryCarryFlag:o=null}=e;const m={carryFlag:t,zeroFlag:a,signFlag:n,overflowFlag:d,parityFlag:s,auxiliaryCarryFlag:o};return r.createElement("table",{className:"table table--striped table--responsive flags_table"},r.createElement("thead",null,r.createElement("tr",null,Object.entries(m).map((e=>{let[t,a]=e;return null==a?null:r.createElement("th",null,r.createElement(i,{text:t,toolTipPosition:"bottom"},t[0].toUpperCase()))})))),r.createElement("tbody",null,r.createElement("tr",null,Object.values(m).map((e=>null==e?null:r.createElement("td",null,r.createElement(l,{state:e})))))))}},2292:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>d,metadata:()=>o,toc:()=>g});var r=a(7462),n=(a(7294),a(3905)),i=a(3749),l=a(7898);const d={title:"CMP",description:"Compare operand1 with operand2 and set the flags."},s=void 0,o={unversionedId:"Instructions/CMP",id:"Instructions/CMP",title:"CMP",description:"Compare operand1 with operand2 and set the flags.",source:"@site/docs/Instructions/CMP.mdx",sourceDirName:"Instructions",slug:"/Instructions/CMP",permalink:"/emu_8086/docs/Instructions/CMP",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/CMP.mdx",tags:[],version:"current",frontMatter:{title:"CMP",description:"Compare operand1 with operand2 and set the flags."},sidebar:"tutorialSidebar",previous:{title:"AND",permalink:"/emu_8086/docs/Instructions/AND"},next:{title:"LEA",permalink:"/emu_8086/docs/Instructions/LEA"}},m={},g=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Example",id:"example",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register, Register Addressing",id:"register-register-addressing",level:3},{value:"Register, Immediate Value Addressing",id:"register-immediate-value-addressing",level:3},{value:"Register, Direct Memory Addressing",id:"register-direct-memory-addressing",level:3},{value:"Register, Direct/Indirect Memory Addressing With (or) Without Displacement",id:"register-directindirect-memory-addressing-with-or-without-displacement",level:3},{value:"Direct/Indirect Memory Addressing With (or) Without Displacement , Register Addressing",id:"directindirect-memory-addressing-with-or-without-displacement--register-addressing",level:3},{value:"Direct/Indirect, Immediate Value Addressing",id:"directindirect-immediate-value-addressing",level:3},{value:"Indirect Memory Addressing With (or) Without Displacement, Immediate Value Addressing",id:"indirect-memory-addressing-with-or-without-displacement-immediate-value-addressing",level:3}],p={toc:g},u="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"syntax"},"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-asm6502"},"CMP operand1, operand2\n")),(0,n.kt)("h2",{id:"attributes"},"Attributes"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Operands")),(0,n.kt)("td",{parentName:"tr",align:null},"The first operand must be a register or a memory location. The second operand can be a register, a memory location or an immediate value.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Operation")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"operand1 - operand2 "))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Size")),(0,n.kt)("td",{parentName:"tr",align:null},"2 to 6 bytes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Action")),(0,n.kt)("td",{parentName:"tr",align:null},"Performs subtraction of operand2 from operand1. Does not store the result, but affects flags based on the result.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Flags")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)(i.Z,{carryFlag:"changed",overflowFlag:"changed",zeroFlag:"changed",signFlag:"changed",parityFlag:"changed",auxiliaryCarryFlag:"changed",mdxType:"FlagsChangedTable"}))))),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-asm6502",metastring:"showLineNumbers",showLineNumbers:!0},"MOV AX, 0x0001\nMOV BX, 0x0002\nCMP AX, BX\n")),(0,n.kt)("p",null,"The flags before the operation are :"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Carry"),(0,n.kt)("th",{parentName:"tr",align:null},"Overflow"),(0,n.kt)("th",{parentName:"tr",align:null},"Zero"),(0,n.kt)("th",{parentName:"tr",align:null},"Sign"),(0,n.kt)("th",{parentName:"tr",align:null},"Parity"),(0,n.kt)("th",{parentName:"tr",align:null},"Auxiliary Carry"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"0"),(0,n.kt)("td",{parentName:"tr",align:null},"0"),(0,n.kt)("td",{parentName:"tr",align:null},"0"),(0,n.kt)("td",{parentName:"tr",align:null},"0"),(0,n.kt)("td",{parentName:"tr",align:null},"0"),(0,n.kt)("td",{parentName:"tr",align:null},"0")))),(0,n.kt)("p",null,"The flags after the operation are:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Carry"),(0,n.kt)("th",{parentName:"tr",align:null},"Overflow"),(0,n.kt)("th",{parentName:"tr",align:null},"Zero"),(0,n.kt)("th",{parentName:"tr",align:null},"Sign"),(0,n.kt)("th",{parentName:"tr",align:null},"Parity"),(0,n.kt)("th",{parentName:"tr",align:null},"Auxiliary Carry"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"1"),(0,n.kt)("td",{parentName:"tr",align:null},"0"),(0,n.kt)("td",{parentName:"tr",align:null},"0"),(0,n.kt)("td",{parentName:"tr",align:null},"1"),(0,n.kt)("td",{parentName:"tr",align:null},"1"),(0,n.kt)("td",{parentName:"tr",align:null},"1")))),(0,n.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,n.kt)("h3",{id:"register-register-addressing"},"Register, Register Addressing"),(0,n.kt)(l.VY,{instructionName:"CMP",mdxType:"RegisterAddressingMode"}),(0,n.kt)("h3",{id:"register-immediate-value-addressing"},"Register, Immediate Value Addressing"),(0,n.kt)(l.vR,{instructionName:"CMP",mdxType:"ImmediateAddressingMode"}),(0,n.kt)("h3",{id:"register-direct-memory-addressing"},"Register, Direct Memory Addressing"),(0,n.kt)(l.PM,{instructionName:"CMP",mdxType:"MemoryAddressingMode"}),(0,n.kt)("h3",{id:"register-directindirect-memory-addressing-with-or-without-displacement"},"Register, Direct/Indirect Memory Addressing With (or) Without Displacement"),(0,n.kt)(l.W7,{instructionName:"CMP",mdxType:"RegisterAndMemoryAddressing"}),(0,n.kt)("h3",{id:"directindirect-memory-addressing-with-or-without-displacement--register-addressing"},"Direct/Indirect Memory Addressing With (or) Without Displacement , Register Addressing"),(0,n.kt)(l.PP,{instructionName:"CMP",mdxType:"MemoryAndRegisterAddressing"}),(0,n.kt)("h3",{id:"directindirect-immediate-value-addressing"},"Direct/Indirect, Immediate Value Addressing"),(0,n.kt)(l.kp,{instructionName:"CMP",mdxType:"DirectMemoryAndImmediateAddressing"}),(0,n.kt)("h3",{id:"indirect-memory-addressing-with-or-without-displacement-immediate-value-addressing"},"Indirect Memory Addressing With (or) Without Displacement, Immediate Value Addressing"),(0,n.kt)(l.qT,{instructionName:"CMP",mdxType:"IndirectMemoryAndImmediateAddressing"}))}c.isMDXComponent=!0}}]);