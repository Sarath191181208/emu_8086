"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[474],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),l=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),u=l(r),m=a,g=u["".concat(o,".").concat(m)]||u[m]||c[m]||i;return r?n.createElement(g,s(s({ref:t},p),{},{components:r})):n.createElement(g,s({ref:t},p))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=m;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d[u]="string"==typeof e?e:a,s[1]=d;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5172:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={title:"MOV",description:"Copies operand2 into operand1."},s=void 0,d={unversionedId:"Instructions/MOV",id:"Instructions/MOV",title:"MOV",description:"Copies operand2 into operand1.",source:"@site/docs/Instructions/MOV.md",sourceDirName:"Instructions",slug:"/Instructions/MOV",permalink:"/emu_8086/docs/Instructions/MOV",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/MOV.md",tags:[],version:"current",frontMatter:{title:"MOV",description:"Copies operand2 into operand1."},sidebar:"tutorialSidebar",previous:{title:"LEA",permalink:"/emu_8086/docs/Instructions/LEA"},next:{title:"TEST",permalink:"/emu_8086/docs/Instructions/TEST"}},o={},l=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register Addressing Mode",id:"register-addressing-mode",level:3},{value:"Immediate Addressing Mode",id:"immediate-addressing-mode",level:3},{value:"Direct Addressing Mode",id:"direct-addressing-mode",level:3},{value:"Register Indirect Addressing Mode",id:"register-indirect-addressing-mode",level:3},{value:"Base-Plus-Index Addressing Mode",id:"base-plus-index-addressing-mode",level:3},{value:"Base-Plus-Index-Plus-Displacement Addressing Mode",id:"base-plus-index-plus-displacement-addressing-mode",level:3}],p={toc:l},u="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm6502"},"MOV operand1, operand2\n")),(0,a.kt)("h2",{id:"attributes"},"Attributes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Size")),(0,a.kt)("td",{parentName:"tr",align:null},"Byte, Word, or Doubleword.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Operands")),(0,a.kt)("td",{parentName:"tr",align:null},"The destination operand is a general-purpose register or memory location. The source operand is a general-purpose register, memory location, or immediate value.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Action")),(0,a.kt)("td",{parentName:"tr",align:null},"Copies the source operand (second operand) to the destination operand (first operand).")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Flags")),(0,a.kt)("td",{parentName:"tr",align:null},"No Flags are changed")))),(0,a.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,a.kt)("h3",{id:"register-addressing-mode"},"Register Addressing Mode"),(0,a.kt)("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, BX\nMOV BL, CH\n")),(0,a.kt)("h3",{id:"immediate-addressing-mode"},"Immediate Addressing Mode"),(0,a.kt)("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, 1234H\nMOV BL, 12H\n")),(0,a.kt)("h3",{id:"direct-addressing-mode"},"Direct Addressing Mode"),(0,a.kt)("p",null,"This is a mode in which the address of the operand is specified in the instruction itself. The operand is located in the memory. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, [1234H]\nMOV CL, [1234H]\n")),(0,a.kt)("p",null,"or equivalently"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm"},"org 100h \n.data \n    Var1 dw 1234H\ncode: \n    MOV AX, Var1\n")),(0,a.kt)("h3",{id:"register-indirect-addressing-mode"},"Register Indirect Addressing Mode"),(0,a.kt)("p",null,"This is a mode in which the address of the operand is contained in the register specified in the instruction. The operand is located in the memory. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, [BX]\n")),(0,a.kt)("h3",{id:"base-plus-index-addressing-mode"},"Base-Plus-Index Addressing Mode"),(0,a.kt)("p",null,"This is a mode in which the address of the operand is specified by the sum of a base register and an index register. The operand is located in the memory. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, [BX+SI]\n")),(0,a.kt)("h3",{id:"base-plus-index-plus-displacement-addressing-mode"},"Base-Plus-Index-Plus-Displacement Addressing Mode"),(0,a.kt)("p",null,"This is a mode in which the address of the operand is specified by the sum of a base register, an index register, and a displacement. The operand is located in the memory. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, [BX+SI+1234H]\n")))}c.isMDXComponent=!0}}]);