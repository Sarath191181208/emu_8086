"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9354],{7898:(e,t,n)=>{n.d(t,{PM:()=>s,PP:()=>h,Py:()=>c,VY:()=>i,W7:()=>d,YH:()=>g,kp:()=>p,lh:()=>o,mL:()=>u,qT:()=>E,vR:()=>m});var r=n(7294),a=n(614),l=n(3612);function i(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} AX, BX \n${e.instructionName} BL, CH`),r.createElement("hr",null))}function m(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a constant."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} AX, 0FFh \n${e.instructionName} BX, 0Bh  \n${e.instructionName} CL, 0h`),r.createElement("hr",null))}function s(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [0x100] ",r.createElement("br",null),e.instructionName," AL, b.[0x100] ",r.createElement("br",null)),"(or) Alternatively you can specify the memory location using the `variable assignment`",r.createElement("p",null,"Example"),r.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`ORG 100h \n.DATA\n  VAR1 DB 0FFh\n  VAR2 DW 0Bh\nCODE:\n  ${e.instructionName} AL, Var1 \n  ${e.instructionName} BX, Var2 \n  ${e.instructionName} CL, b.[Var2] \n  ${e.instructionName} DX, w.[Var1]`),r.createElement("hr",null))}function u(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [BX] ",r.createElement("br",null),e.instructionName," AL, b.[BX] ",r.createElement("br",null)),r.createElement("hr",null))}function c(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI] ",r.createElement("br",null)),r.createElement("hr",null))}function o(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset and a displacement."),r.createElement("p",null,"Example:"),r.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI+10h] ",r.createElement("br",null),e.instructionName," AX, [BX+SI+100h] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI+10h] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI+100h] ",r.createElement("br",null)),r.createElement("hr",null))}function d(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified as a register while the other operand is specified as a memory location. The second operand is a memory location whose address is contained in a register (or) an offset. The second operand might also have an displacement."),r.createElement("p",null,"Example: "),r.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`org 100h\ndata\n    VAR DB 0FFh\n    VAR2 DW 0Bh\ncode:\n    ${e.instructionName} BX, Var\n    ${e.instructionName} BX, w.[Var]\n    ${e.instructionName} BX, w.[Var2]\n    ${e.instructionName} AX, [BX]\n    ${e.instructionName} DX, [BX+SI]\n    ${e.instructionName} SP, [BX+SI+10h]\n    ${e.instructionName} DI, [BX+SI+100h]\n`))}function h(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a register. The first operand is a memory location whose address is contained in a register (or) an offset. The first operand might also have an displacement."),r.createElement("p",null,"Example: "),r.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`org 100h\ndata\n    VAR DB 0FFh\n    VAR2 DW 0Bh\ncode:\n    ${e.instructionName} Var, BX\n    ${e.instructionName} w.[Var], BX\n    ${e.instructionName} w.[Var2], BX\n    ${e.instructionName} [BX], AX\n    ${e.instructionName} [BX+SI], DX\n    ${e.instructionName} [BX+SI+10h], SP\n    ${e.instructionName} [BX+SI+100h], DI\n`))}function E(e){return r.createElement(l.Z,{type:"danger",title:"Warning, This feature is still not supported."},r.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a constant. The first operand is a memory location whose address is contained in a register (or) an offset. The first operand might also have an displacement."),r.createElement("p",null,"Example: "),r.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} [BX], 0FFh\n${e.instructionName} [BX+SI], 0FFh\n${e.instructionName} [BX+SI+10h], 0FFh\n${e.instructionName} [BX+SI+100h], 0FFh\n`))}function p(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a constant. The first operand is a memory location whose address is specified directly in the instruction."),r.createElement("p",null,"Example: "),r.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} [BX], 0FFh\n${e.instructionName} [BX+SI], 0FFh\n${e.instructionName} [BX+SI+10h], 0FFh\n${e.instructionName} [BX+SI+100h], 0FFh\n`))}function g(e){return r.createElement("table",null,r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Operand"),r.createElement("th",null,"Opcode"),r.createElement("th",null,"Size(bytes)"),r.createElement("th",null,"Example instruction"))),r.createElement("tbody",null,r.createElement("tr",null,r.createElement("td",null,"reg16, indirect mem"),r.createElement("td",null,e.reg_16bit_and_anything_ins," 0x00..=0x3F"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AX, [BX]`)),r.createElement("tr",null,r.createElement("td",null,"reg16, direct mem"),r.createElement("td",null,e.reg_16bit_and_anything_ins," ","0x06 | reg_idx << 3"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} DX, [0x100]`)),r.createElement("tr",null,r.createElement("td",null,"reg16, indirect mem with 8bit offset"),r.createElement("td",null,e.reg_16bit_and_anything_ins," 0x40..=0x7F 0x00..=0xFF"),r.createElement("td",null,"3"),r.createElement("td",null,`${e.instructionName} AX, [BX+0x10]`)),r.createElement("tr",null,r.createElement("td",null,"reg16, indirect mem with 16bit offset"),r.createElement("td",null,e.reg_16bit_and_anything_ins," 0x80..=0xBF 0x00..=0xFF"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} AX, [BX+0x100]`)),r.createElement("tr",null,r.createElement("td",null,"reg16, reg16"),r.createElement("td",null,e.reg_16bit_and_anything_ins," 0xC0..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AX, BX`)),r.createElement("tr",null,r.createElement("td",null,"reg8, indirect mem"),r.createElement("td",null,e.reg_8bit_and_anything_ins," 0x00..=0x3F"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AL, [BX]`)),r.createElement("tr",null,r.createElement("td",null,"reg8, direct mem"),r.createElement("td",null,e.reg_8bit_and_anything_ins," ","0x06 | reg_idx << 3"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} CL, [0x100]`)),r.createElement("tr",null,r.createElement("td",null,"reg8, indirect mem with 8bit offset"),r.createElement("td",null,e.reg_8bit_and_anything_ins," 0x40..=0x7F 0x00..=0xFF"),r.createElement("td",null,"3"),r.createElement("td",null,`${e.instructionName} AL, [BX+0x10]`)),r.createElement("tr",null,r.createElement("td",null,"reg8, indirect mem with 16bit offset"),r.createElement("td",null,e.reg_8bit_and_anything_ins," 0x80..=0xBF 0x00..=0xFF"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} AL, [BX+0x100]`)),r.createElement("tr",null,r.createElement("td",null,"reg8, reg8"),r.createElement("td",null,e.reg_8bit_and_anything_ins," 0xC0..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AL, BL`)),r.createElement("tr",null,r.createElement("td",null,"indirect mem, reg 16"),r.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x00..=0x3F"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} [BX+SI], AX`)),r.createElement("tr",null,r.createElement("td",null,"direct mem, reg 16"),r.createElement("td",null,e.indexed_addressing_and_anyting_ins," ","0x06 | reg_idx << 3"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} [0x100], BP`)),r.createElement("tr",null,r.createElement("td",null,"indirect mem with 8bit offset, reg 16"),r.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x40..=0x7F 0x00..=0xFF"),r.createElement("td",null,"3"),r.createElement("td",null,`${e.instructionName} [BX+SI+0x10], CX`)),r.createElement("tr",null,r.createElement("td",null,"indirect mem with 16bit offset, reg 16"),r.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x80..=0xBF 0x00..=0xFF"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} [BX+SI+0x100], DX`)),r.createElement("tr",null,r.createElement("td",null,"direct mem, reg 8"),r.createElement("td",null,e.addr_and_8bit_reg," ","0x06 | reg_idx << 3"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} [0x100], AL`)),r.createElement("tr",null,r.createElement("td",null,"AL, num"),r.createElement("td",null,e.al_and_num_ins," 0x00..=0xFF 0x00..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AL, 0x10`)),r.createElement("tr",null,r.createElement("td",null,"AX, num"),r.createElement("td",null,e.ax_and_num_ins," 0x00..=0xFF 0x00..=0xFF"),r.createElement("td",null,"3"),r.createElement("td",null,`${e.instructionName} AX, 0x100`)),r.createElement("tr",null,r.createElement("td",null,"reg16, num16"),r.createElement("td",null,e.reg16bit_and_16bit_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF 0x00..=0xFF"),r.createElement("td",null,"3"),r.createElement("td",null,`${e.instructionName} DX, 0x100`)),r.createElement("tr",null,r.createElement("td",null,"reg16, num8"),r.createElement("td",null,e.reg16bit_and_8bit_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} CX, 0x10`)),r.createElement("tr",null,r.createElement("td",null,"reg8, num"),r.createElement("td",null,e.reg8bit_and_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AL, 0x10`)),r.createElement("tr",null,r.createElement("td",null,"direct address, num16"),r.createElement("td",null,e.addr16bit_and_16bit_num," ",e.addr_num_sub_ins,"+reg_idx"," ","[0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF 0x00..=0xFF"),r.createElement("td",null,"6"),r.createElement("td",null,`${e.instructionName} [0x100], 0x100`)),r.createElement("tr",null,r.createElement("td",null,"direct address, num8"),r.createElement("td",null,e.addr16bit_and_16bit_num," ",e.addr_num_sub_ins,"+reg_idx"," ","[0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF"," "),r.createElement("td",null,"5"),r.createElement("td",null,`${e.instructionName} [0x100], 0x10`)),r.createElement("tr",null,r.createElement("td",null,"addr8, num"),r.createElement("td",null,e.addr8bit_and_num," ",e.addr_num_sub_ins,"+reg_idx [0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} b.[0x100], 0x10`))))}},380:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905)),l=n(7898);const i={authors:{name:"Vangipuram Srinivasa Sarath Chandra",title:"Tech enthusiast",url:"https://github.com/Sarath191181208",image_url:"https://avatars.githubusercontent.com/u/74459981?v=4"}},m="Support for execution of OR ins",s={permalink:"/emu_8086/blog/2023/11/2/",editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/blog/2023-11-2.mdx",source:"@site/blog/2023-11-2.mdx",title:"Support for execution of OR ins",description:"Execution of OR instructions",date:"2023-11-02T00:00:00.000Z",formattedDate:"November 2, 2023",tags:[],readingTime:.775,hasTruncateMarker:!1,authors:[{name:"Vangipuram Srinivasa Sarath Chandra",title:"Tech enthusiast",url:"https://github.com/Sarath191181208",image_url:"https://avatars.githubusercontent.com/u/74459981?v=4",imageURL:"https://avatars.githubusercontent.com/u/74459981?v=4"}],frontMatter:{authors:{name:"Vangipuram Srinivasa Sarath Chandra",title:"Tech enthusiast",url:"https://github.com/Sarath191181208",image_url:"https://avatars.githubusercontent.com/u/74459981?v=4",imageURL:"https://avatars.githubusercontent.com/u/74459981?v=4"}},prevItem:{title:"Support for of SBB ins",permalink:"/emu_8086/blog/2023/11/3/"},nextItem:{title:"Support for memory, reg addressing for 2 operand instructions",permalink:"/emu_8086/blog/2023/11/1/"}},u={authorsImageUrls:[void 0]},c=[{value:"Execution of <code>OR</code> instructions",id:"execution-of-or-instructions",level:2},{value:"Compilation of <code>XOR</code> ins",id:"compilation-of-xor-ins",level:2},{value:"Execution of the <code>xor</code> instruction",id:"execution-of-the-xor-instruction",level:2}],o={toc:c},d="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"execution-of-or-instructions"},"Execution of ",(0,a.kt)("inlineCode",{parentName:"h2"},"OR")," instructions"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"OR")," instruction performs a bitwise OR operation on the value in register ",(0,a.kt)("inlineCode",{parentName:"p"},"rs1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"rs2")," and stores the result in register ",(0,a.kt)("inlineCode",{parentName:"p"},"rs1"),". The syntax is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm6502",metastring:"showLineNumbers",showLineNumbers:!0},"OR AX, BX\n")),(0,a.kt)("h2",{id:"compilation-of-xor-ins"},"Compilation of ",(0,a.kt)("inlineCode",{parentName:"h2"},"XOR")," ins"),(0,a.kt)("p",null,"It is used to perform bitwise XOR operation on the value in register ",(0,a.kt)("inlineCode",{parentName:"p"},"rs1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"rs2")," and stores the result in register ",(0,a.kt)("inlineCode",{parentName:"p"},"rs1"),". The syntax is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm6502",metastring:"showLineNumbers",showLineNumbers:!0},"XOR AX, BX\n")),(0,a.kt)(l.YH,{instructionName:"XOR",reg_16bit_and_anything_ins:51,reg_8bit_and_anything_ins:50,indexed_addressing_and_anyting_ins:49,addr_and_8bit_reg:48,al_and_num_ins:52,ax_and_num_ins:53,reg16bit_and_16bit_num:129,reg16bit_and_8bit_num:131,reg8bit_and_num:128,reg_num_sub_ins:240,addr16bit_and_16bit_num:129,addr16bit_and_8bit_num:131,addr8bit_and_num:128,addr_num_sub_ins:54,mdxType:"GenerateCompilationTable"}),(0,a.kt)("h2",{id:"execution-of-the-xor-instruction"},"Execution of the ",(0,a.kt)("inlineCode",{parentName:"h2"},"xor")," instruction"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"xor")," instruction performs a bitwise XOR operation on the value in register ",(0,a.kt)("inlineCode",{parentName:"p"},"rs1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"rs2")," and stores the result in register ",(0,a.kt)("inlineCode",{parentName:"p"},"rs1"),". The syntax is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm6502",metastring:"showLineNumbers",showLineNumbers:!0},"xor AX, BX\n")),(0,a.kt)("p",null,"Algorithm:\nop1 <- op1 XOR op2"))}h.isMDXComponent=!0}}]);