"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7935],{3240:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>d,toc:()=>u});var a=t(7462),o=(t(7294),t(3905)),i=t(7898);const r={authors:{name:"Vangipuram Srinivasa Sarath Chandra",title:"Tech enthusiast",url:"https://github.com/Sarath191181208",image_url:"https://avatars.githubusercontent.com/u/74459981?v=4"}},s="Support for of SBB ins",d={permalink:"/emu_8086/blog/2023/11/3/",editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/blog/2023-11-3.mdx",source:"@site/blog/2023-11-3.mdx",title:"Support for of SBB ins",description:"Compilation of SBB ins",date:"2023-11-03T00:00:00.000Z",formattedDate:"November 3, 2023",tags:[],readingTime:1.385,hasTruncateMarker:!1,authors:[{name:"Vangipuram Srinivasa Sarath Chandra",title:"Tech enthusiast",url:"https://github.com/Sarath191181208",image_url:"https://avatars.githubusercontent.com/u/74459981?v=4",imageURL:"https://avatars.githubusercontent.com/u/74459981?v=4"}],frontMatter:{authors:{name:"Vangipuram Srinivasa Sarath Chandra",title:"Tech enthusiast",url:"https://github.com/Sarath191181208",image_url:"https://avatars.githubusercontent.com/u/74459981?v=4",imageURL:"https://avatars.githubusercontent.com/u/74459981?v=4"}},nextItem:{title:"Support for execution of OR ins",permalink:"/emu_8086/blog/2023/11/2/"}},m={authorsImageUrls:[void 0]},u=[{value:"Compilation of <code>SBB</code> ins",id:"compilation-of-sbb-ins",level:2},{value:"\ud83d\udee0\ufe0f Refactor: extracted common consume logic in cpu",id:"\ufe0f-refactor-extracted-common-consume-logic-in-cpu",level:2},{value:"\u2728 NEW: Support xchg instruction",id:"-new-support-xchg-instruction",level:2}],c={toc:u},h="wrapper";function l(e){let{components:n,...t}=e;return(0,o.kt)(h,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"compilation-of-sbb-ins"},"Compilation of ",(0,o.kt)("inlineCode",{parentName:"h2"},"SBB")," ins"),(0,o.kt)("p",null,"It is used to subtract the second operand from the first operand along with the borrow flag. The result is stored in the first operand. The flags are modified accordingly. The operands may be registers or memory locations. The first operand is also called the destination operand and the second operand is called the source operand. The destination operand can be a register or a memory location; the source operand can be an immediate, register, or memory location. (However, two memory operands cannot be used in one instruction.) When an immediate value is used as an operand, it is sign-extended to the length of the destination operand format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-asm6502",metastring:"showLineNumbers",showLineNumbers:!0},"SBB AX, BX\n")),(0,o.kt)(i.YH,{instructionName:"SBB",reg_16bit_and_anything_ins:27,reg_8bit_and_anything_ins:26,indexed_addressing_and_anyting_ins:25,addr_and_8bit_reg:24,al_and_num_ins:28,ax_and_num_ins:29,reg16bit_and_16bit_num:129,reg16bit_and_8bit_num:131,reg8bit_and_num:128,reg_num_sub_ins:216,addr16bit_and_16bit_num:129,addr16bit_and_8bit_num:131,addr8bit_and_num:128,addr_num_sub_ins:30,mdxType:"GenerateCompilationTable"}),(0,o.kt)("h2",{id:"\ufe0f-refactor-extracted-common-consume-logic-in-cpu"},"\ud83d\udee0\ufe0f Refactor: extracted common consume logic in cpu"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"showLineNumbers",showLineNumbers:!0},"// Removed\nmatch ins {\n    // Removed\n    0x06 | 0x0E | 0x16 | 0x1E | 0x26 | 0x2E | 0x36 | 0x3E => {\n    // Removed\n        // ...\n    // Removed\n    }\n    // Removed\n    0x00..=0x3F => {\n    // Removed\n        // ...\n    // Removed\n    }\n    // Removed\n    0x40..=0x7F => {\n    // Removed\n        // ...\n    // Removed\n    }\n    // Removed\n    0x80..=0xBF => {\n    // Removed\n        // ...\n    // Removed\n    }\n// Removed\n}\n\n// replaced with\n// Added\nmatch self.consume_bytes_and_parse_double_ins(mem) {\n    // Added\n    AddressingMode::Address(reg_idx, addr) => {\n        // Added\n        // ...  \n    // Added\n    }\n    // Added\n    AddressingMode::Reg(reg_idx, low_reg) => {\n        // Added\n        // ...\n    // Added\n    }\n// Added\n}\n")),(0,o.kt)("h2",{id:"-new-support-xchg-instruction"},"\u2728 NEW: Support xchg instruction"),(0,o.kt)("p",null,"Made the ",(0,o.kt)("inlineCode",{parentName:"p"},"xchg")," instruction work with all the addressing modes."))}l.isMDXComponent=!0}}]);