"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[243],{7898:(e,t,n)=>{n.d(t,{PM:()=>m,PP:()=>o,Py:()=>d,VY:()=>a,W7:()=>u,YH:()=>p,kp:()=>g,lh:()=>c,mL:()=>s,qT:()=>E,vR:()=>i});var l=n(7294),r=n(614);function a(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register."),l.createElement("p",null,"Example:"),l.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, BX ",l.createElement("br",null),e.instructionName," BL, CH"),l.createElement("hr",null))}function i(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a constant."),l.createElement("p",null,"Example:"),l.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, 0FFh ",l.createElement("br",null),e.instructionName," BX, 0Bh ",l.createElement("br",null),e.instructionName," CL, 0h"),l.createElement("hr",null))}function m(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location."),l.createElement("p",null,"Example:"),l.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, [0x100] ",l.createElement("br",null),e.instructionName," AL, b.[0x100] ",l.createElement("br",null)),"(or) Alternatively you can specify the memory location using the `variable assignment`",l.createElement("p",null,"Example"),l.createElement(r.Z,{language:"asm6502"},"ORG 100h ",l.createElement("br",null),".DATA ",l.createElement("br",null),"    VAR1 DB 0FFh"," ",l.createElement("br",null),"    VAR2 DW 0Bh"," ",l.createElement("br",null)," ",l.createElement("br",null),"CODE: ",l.createElement("br",null),`    ${e.instructionName} AL, Var1`," ",l.createElement("br",null),`    ${e.instructionName} BX, Var2`," ",l.createElement("br",null),`    ${e.instructionName} CL, b.[Var2]`," ",l.createElement("br",null),`    ${e.instructionName} DX, w.[Var1]`," ",l.createElement("br",null)),l.createElement("hr",null))}function s(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register."),l.createElement("p",null,"Example:"),l.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, [BX] ",l.createElement("br",null),e.instructionName," AL, b.[BX] ",l.createElement("br",null)),l.createElement("hr",null))}function d(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset."),l.createElement("p",null,"Example:"),l.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI] ",l.createElement("br",null),e.instructionName," AL, b.[BX+SI] ",l.createElement("br",null)),l.createElement("hr",null))}function c(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset and a displacement."),l.createElement("p",null,"Example:"),l.createElement(r.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI+10h] ",l.createElement("br",null),e.instructionName," AX, [BX+SI+100h] ",l.createElement("br",null),e.instructionName," AL, b.[BX+SI+10h] ",l.createElement("br",null),e.instructionName," AL, b.[BX+SI+100h] ",l.createElement("br",null)),l.createElement("hr",null))}function u(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified as a register while the other operand is specified as a memory location. The second operand is a memory location whose address is contained in a register (or) an offset. The second operand might also have an displacement."),l.createElement("p",null,"Example: "),l.createElement(r.Z,{language:"asm6502",showLineNumbers:!0},"org 100h ",l.createElement("br",null),"data ",l.createElement("br",null),"    VAR DB 0FFh"," ",l.createElement("br",null),"    VAR2 DW 0Bh"," ",l.createElement("br",null),"code: ",l.createElement("br",null),`    ${e.instructionName} BX, Var `,l.createElement("br",null),`    ${e.instructionName} BX, w.[Var] `,l.createElement("br",null),`    ${e.instructionName} BX, w.[Var2] `,l.createElement("br",null)," ",l.createElement("br",null),`    ${e.instructionName} AX, [BX] `,l.createElement("br",null),`    ${e.instructionName} DX, [BX+SI] `,l.createElement("br",null),`    ${e.instructionName} SP, [BX+SI+10h] `,l.createElement("br",null),`    ${e.instructionName} DI, [BX+SI+100h] `,l.createElement("br",null)))}function o(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a register. The first operand is a memory location whose address is contained in a register (or) an offset. The first operand might also have an displacement."),l.createElement("p",null,"Example: "),l.createElement(r.Z,{language:"asm6502",showLineNumbers:!0},"org 100h ",l.createElement("br",null),"data ",l.createElement("br",null),"    VAR DB 0FFh"," ",l.createElement("br",null),"    VAR2 DW 0Bh"," ",l.createElement("br",null),"code: ",l.createElement("br",null),`    ${e.instructionName} Var, BX `,l.createElement("br",null),`    ${e.instructionName} w.[Var], BX `,l.createElement("br",null),`    ${e.instructionName} w.[Var2], BX `,l.createElement("br",null)," ",l.createElement("br",null),`    ${e.instructionName} [BX], AX `,l.createElement("br",null),`    ${e.instructionName} [BX+SI], DX `,l.createElement("br",null),`    ${e.instructionName} [BX+SI+10h], SP `,l.createElement("br",null),`    ${e.instructionName} [BX+SI+100h], DI `,l.createElement("br",null)))}function E(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a constant. The first operand is a memory location whose address is contained in a register (or) an offset. The first operand might also have an displacement."),l.createElement("p",null,"Example: "),l.createElement(r.Z,{language:"asm6502",showLineNumbers:!0},`    ${e.instructionName} [BX], 0FFh `,l.createElement("br",null),`    ${e.instructionName} [BX+SI], 0FFh `,l.createElement("br",null),`    ${e.instructionName} [BX+SI+10h], 0FFh `,l.createElement("br",null),`    ${e.instructionName} [BX+SI+100h], 0FFh `,l.createElement("br",null)))}function g(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a constant. The first operand is a memory location whose address is specified directly in the instruction."),l.createElement("p",null,"Example: "),l.createElement(r.Z,{language:"asm6502",showLineNumbers:!0},"org 100h ",l.createElement("br",null),"data ",l.createElement("br",null),"    VAR DB 0FFh"," ",l.createElement("br",null),"    VAR2 DW 0Bh"," ",l.createElement("br",null),"code: ",l.createElement("br",null),`    ${e.instructionName} [Var], 0xFF `,l.createElement("br",null),`    ${e.instructionName} [Var2], 0x100 `,l.createElement("br",null),`    ${e.instructionName} [0x100], 0x100+20 `,l.createElement("br",null),`    ${e.instructionName} [0x100+10h], 0FFh `))}function p(e){return l.createElement("table",null,l.createElement("thead",null,l.createElement("tr",null,l.createElement("th",null,"Operand"),l.createElement("th",null,"Opcode"),l.createElement("th",null,"Size(bytes)"),l.createElement("th",null,"Example instruction"))),l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,"reg16, indirect mem"),l.createElement("td",null,e.reg_16bit_and_anything_ins," 0x00..=0x3F"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AX, [BX]`)),l.createElement("tr",null,l.createElement("td",null,"reg16, direct mem"),l.createElement("td",null,e.reg_16bit_and_anything_ins," ","0x06 | reg_idx << 3"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} DX, [0x100]`)),l.createElement("tr",null,l.createElement("td",null,"reg16, indirect mem with 8bit offset"),l.createElement("td",null,e.reg_16bit_and_anything_ins," 0x40..=0x7F 0x00..=0xFF"),l.createElement("td",null,"3"),l.createElement("td",null,`${e.instructionName} AX, [BX+0x10]`)),l.createElement("tr",null,l.createElement("td",null,"reg16, indirect mem with 16bit offset"),l.createElement("td",null,e.reg_16bit_and_anything_ins," 0x80..=0xBF 0x00..=0xFF"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} AX, [BX+0x100]`)),l.createElement("tr",null,l.createElement("td",null,"reg16, reg16"),l.createElement("td",null,e.reg_16bit_and_anything_ins," 0xC0..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AX, BX`)),l.createElement("tr",null,l.createElement("td",null,"reg8, indirect mem"),l.createElement("td",null,e.reg_8bit_and_anything_ins," 0x00..=0x3F"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AL, [BX]`)),l.createElement("tr",null,l.createElement("td",null,"reg8, direct mem"),l.createElement("td",null,e.reg_8bit_and_anything_ins," ","0x06 | reg_idx << 3"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} CL, [0x100]`)),l.createElement("tr",null,l.createElement("td",null,"reg8, indirect mem with 8bit offset"),l.createElement("td",null,e.reg_8bit_and_anything_ins," 0x40..=0x7F 0x00..=0xFF"),l.createElement("td",null,"3"),l.createElement("td",null,`${e.instructionName} AL, [BX+0x10]`)),l.createElement("tr",null,l.createElement("td",null,"reg8, indirect mem with 16bit offset"),l.createElement("td",null,e.reg_8bit_and_anything_ins," 0x80..=0xBF 0x00..=0xFF"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} AL, [BX+0x100]`)),l.createElement("tr",null,l.createElement("td",null,"reg8, reg8"),l.createElement("td",null,e.reg_8bit_and_anything_ins," 0xC0..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AL, BL`)),l.createElement("tr",null,l.createElement("td",null,"indirect mem, reg 16"),l.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x00..=0x3F"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} [BX+SI], AX`)),l.createElement("tr",null,l.createElement("td",null,"direct mem, reg 16"),l.createElement("td",null,e.indexed_addressing_and_anyting_ins," ","0x06 | reg_idx << 3"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} [0x100], BP`)),l.createElement("tr",null,l.createElement("td",null,"indirect mem with 8bit offset, reg 16"),l.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x40..=0x7F 0x00..=0xFF"),l.createElement("td",null,"3"),l.createElement("td",null,`${e.instructionName} [BX+SI+0x10], CX`)),l.createElement("tr",null,l.createElement("td",null,"indirect mem with 16bit offset, reg 16"),l.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x80..=0xBF 0x00..=0xFF"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} [BX+SI+0x100], DX`)),l.createElement("tr",null,l.createElement("td",null,"direct mem, reg 8"),l.createElement("td",null,e.addr_and_8bit_reg," ","0x06 | reg_idx << 3"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} [0x100], AL`)),l.createElement("tr",null,l.createElement("td",null,"AL, num"),l.createElement("td",null,e.al_and_num_ins," 0x00..=0xFF 0x00..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AL, 0x10`)),l.createElement("tr",null,l.createElement("td",null,"AX, num"),l.createElement("td",null,e.ax_and_num_ins," 0x00..=0xFF 0x00..=0xFF"),l.createElement("td",null,"3"),l.createElement("td",null,`${e.instructionName} AX, 0x100`)),l.createElement("tr",null,l.createElement("td",null,"reg16, num16"),l.createElement("td",null,e.reg16bit_and_16bit_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF 0x00..=0xFF"),l.createElement("td",null,"3"),l.createElement("td",null,`${e.instructionName} DX, 0x100`)),l.createElement("tr",null,l.createElement("td",null,"reg16, num8"),l.createElement("td",null,e.reg16bit_and_8bit_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} CX, 0x10`)),l.createElement("tr",null,l.createElement("td",null,"reg8, num"),l.createElement("td",null,e.reg8bit_and_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AL, 0x10`)),l.createElement("tr",null,l.createElement("td",null,"direct address, num16"),l.createElement("td",null,e.addr16bit_and_16bit_num," ",e.addr_num_sub_ins,"+reg_idx"," ","[0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF 0x00..=0xFF"),l.createElement("td",null,"6"),l.createElement("td",null,`${e.instructionName} [0x100], 0x100`)),l.createElement("tr",null,l.createElement("td",null,"direct address, num8"),l.createElement("td",null,e.addr16bit_and_16bit_num," ",e.addr_num_sub_ins,"+reg_idx"," ","[0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF"," "),l.createElement("td",null,"5"),l.createElement("td",null,`${e.instructionName} [0x100], 0x10`)),l.createElement("tr",null,l.createElement("td",null,"addr8, num"),l.createElement("td",null,e.addr8bit_and_num," ",e.addr_num_sub_ins,"+reg_idx [0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} b.[0x100], 0x10`))))}},3749:(e,t,n)=>{n.d(t,{Z:()=>m});var l=n(7294);const r={tooltip:"tooltip_OfI_",tooltiptext:"tooltiptext_kMd9",bottomTooltiptext:"bottomTooltiptext_PBXK"};function a(e){let{children:t,text:n,toolTipPosition:a="top"}=e;const i="top"===a?r.tooltiptext:r.bottomTooltiptext;return l.createElement("div",{className:r.tooltip},t,l.createElement("span",{className:i},n))}const i=e=>{let{state:t}=e;return"changed"===t?l.createElement("span",{className:"badge badge--primary badge--rounded h-20"},l.createElement("span",{className:"badge__text"},l.createElement(a,{text:"Changes"},"C"))):"unchanged"===t?l.createElement("span",{className:"badge badge--secondary badge--rounded"},l.createElement("span",{className:"badge__text"},l.createElement(a,{text:"Doesn't change"},"NC"))):1==t?l.createElement("span",{className:"badge badge--success badge--rounded"},l.createElement("span",{className:"badge__text"},l.createElement(a,{text:"Changed to 1"},"1"))):0==t?l.createElement("span",{className:"badge badge--danger badge--rounded"},l.createElement("span",{className:"badge__text"},l.createElement(a,{text:"Changed to 0"},"0"))):l.createElement("span",{className:"badge badge--warning badge--rounded"},l.createElement("span",{className:"badge__text"},"Unknown"))};function m(e){let{carryFlag:t=null,zeroFlag:n=null,signFlag:r=null,overflowFlag:m=null,parityFlag:s=null,auxiliaryCarryFlag:d=null}=e;const c={carryFlag:t,zeroFlag:n,signFlag:r,overflowFlag:m,parityFlag:s,auxiliaryCarryFlag:d};return l.createElement("table",{className:"table table--striped table--responsive"},l.createElement("thead",null,l.createElement("tr",null,Object.entries(c).map((e=>{let[t,n]=e;return null==n?null:l.createElement("th",null,l.createElement(a,{text:t,toolTipPosition:"bottom"},t[0].toUpperCase()))})))),l.createElement("tbody",null,l.createElement("tr",null,Object.values(c).map((e=>null==e?null:l.createElement("td",null,l.createElement(i,{state:e})))))))}},9802:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>m,metadata:()=>d,toc:()=>u});var l=n(7462),r=(n(7294),n(3905)),a=n(3749),i=n(7898);const m={title:"AND",description:"Performs a bitwise AND operation on the two operands and stores the result in first operand."},s=void 0,d={unversionedId:"Instructions/AND",id:"Instructions/AND",title:"AND",description:"Performs a bitwise AND operation on the two operands and stores the result in first operand.",source:"@site/docs/Instructions/AND.mdx",sourceDirName:"Instructions",slug:"/Instructions/AND",permalink:"/emu_8086/docs/Instructions/AND",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/AND.mdx",tags:[],version:"current",frontMatter:{title:"AND",description:"Performs a bitwise AND operation on the two operands and stores the result in first operand."},sidebar:"tutorialSidebar",previous:{title:"Instructions",permalink:"/emu_8086/docs/category/instructions"},next:{title:"LEA",permalink:"/emu_8086/docs/Instructions/LEA"}},c={},u=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register Addressing",id:"register-addressing",level:3},{value:"Immediate Addressing Mode",id:"immediate-addressing-mode",level:3},{value:"MemoryAddressingMode",id:"memoryaddressingmode",level:3},{value:"RegisterIndirectAddressingMode",id:"registerindirectaddressingmode",level:3},{value:"BasePlusIndexedAddressingMode",id:"baseplusindexedaddressingmode",level:3},{value:"BasePlusIndexPlusDisplacementAddressingMode",id:"baseplusindexplusdisplacementaddressingmode",level:3}],o={toc:u},E="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(E,(0,l.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asm6502"},"AND operand1, operand2\n")),(0,r.kt)("h2",{id:"attributes"},"Attributes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Size")),(0,r.kt)("td",{parentName:"tr",align:null},"Byte, Word, Doubleword, 3 Bytes, 5 Bytes (or) 6 Bytes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Operands")),(0,r.kt)("td",{parentName:"tr",align:null},"The first operand is a general-purpose register or memory location. The second operand is a general-purpose register, memory location, or immediate value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Action")),(0,r.kt)("td",{parentName:"tr",align:null},"Performs a bitwise AND operation on the two operands. The result is saved in first operand.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Flags")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(a.Z,{carryFlag:!1,overflowFlag:!1,zeroFlag:"changed",signFlag:"changed",parityFlag:"changed",mdxType:"FlagsChangedTable"}))))),(0,r.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,r.kt)("h3",{id:"register-addressing"},"Register Addressing"),(0,r.kt)(i.VY,{instructionName:"AND",mdxType:"RegisterAddressingMode"}),(0,r.kt)("h3",{id:"immediate-addressing-mode"},"Immediate Addressing Mode"),(0,r.kt)(i.vR,{instructionName:"AND",mdxType:"ImmediateAddressingMode"}),(0,r.kt)("h3",{id:"memoryaddressingmode"},"MemoryAddressingMode"),(0,r.kt)(i.PM,{instructionName:"AND",mdxType:"MemoryAddressingMode"}),(0,r.kt)("h3",{id:"registerindirectaddressingmode"},"RegisterIndirectAddressingMode"),(0,r.kt)(i.mL,{instructionName:"AND",mdxType:"RegisterIndirectAddressingMode"}),(0,r.kt)("h3",{id:"baseplusindexedaddressingmode"},"BasePlusIndexedAddressingMode"),(0,r.kt)(i.Py,{instructionName:"AND",mdxType:"BasePlusIndexedAddressingMode"}),(0,r.kt)("h3",{id:"baseplusindexplusdisplacementaddressingmode"},"BasePlusIndexPlusDisplacementAddressingMode"),(0,r.kt)(i.lh,{instructionName:"AND",mdxType:"BasePlusIndexPlusDisplacementAddressingMode"}))}g.isMDXComponent=!0}}]);