"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1325],{7898:(e,t,n)=>{n.d(t,{PM:()=>s,PP:()=>E,Py:()=>c,VY:()=>i,W7:()=>o,YH:()=>g,kp:()=>p,lh:()=>d,mL:()=>u,qT:()=>h,vR:()=>m});var l=n(7294),a=n(614),r=n(3612);function i(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register."),l.createElement("p",null,"Example:"),l.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} AX, BX \n${e.instructionName} BL, CH`),l.createElement("hr",null))}function m(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a constant."),l.createElement("p",null,"Example:"),l.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} AX, 0FFh \n${e.instructionName} BX, 0Bh  \n${e.instructionName} CL, 0h`),l.createElement("hr",null))}function s(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location."),l.createElement("p",null,"Example:"),l.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [0x100] ",l.createElement("br",null),e.instructionName," AL, b.[0x100] ",l.createElement("br",null)),"(or) Alternatively you can specify the memory location using the `variable assignment`",l.createElement("p",null,"Example"),l.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`ORG 100h \n.DATA\n  VAR1 DB 0FFh\n  VAR2 DW 0Bh\nCODE:\n  ${e.instructionName} AL, Var1 \n  ${e.instructionName} BX, Var2 \n  ${e.instructionName} CL, b.[Var2] \n  ${e.instructionName} DX, w.[Var1]`),l.createElement("hr",null))}function u(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register."),l.createElement("p",null,"Example:"),l.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [BX] ",l.createElement("br",null),e.instructionName," AL, b.[BX] ",l.createElement("br",null)),l.createElement("hr",null))}function c(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset."),l.createElement("p",null,"Example:"),l.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI] ",l.createElement("br",null),e.instructionName," AL, b.[BX+SI] ",l.createElement("br",null)),l.createElement("hr",null))}function d(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset and a displacement."),l.createElement("p",null,"Example:"),l.createElement(a.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI+10h] ",l.createElement("br",null),e.instructionName," AX, [BX+SI+100h] ",l.createElement("br",null),e.instructionName," AL, b.[BX+SI+10h] ",l.createElement("br",null),e.instructionName," AL, b.[BX+SI+100h] ",l.createElement("br",null)),l.createElement("hr",null))}function o(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified as a register while the other operand is specified as a memory location. The second operand is a memory location whose address is contained in a register (or) an offset. The second operand might also have an displacement."),l.createElement("p",null,"Example: "),l.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`org 100h\ndata\n    VAR DB 0FFh\n    VAR2 DW 0Bh\ncode:\n    ${e.instructionName} BX, Var\n    ${e.instructionName} BX, w.[Var]\n    ${e.instructionName} BX, w.[Var2]\n    ${e.instructionName} AX, [BX]\n    ${e.instructionName} DX, [BX+SI]\n    ${e.instructionName} SP, [BX+SI+10h]\n    ${e.instructionName} DI, [BX+SI+100h]\n`))}function E(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a register. The first operand is a memory location whose address is contained in a register (or) an offset. The first operand might also have an displacement."),l.createElement("p",null,"Example: "),l.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`org 100h\ndata\n    VAR DB 0FFh\n    VAR2 DW 0Bh\ncode:\n    ${e.instructionName} Var, BX\n    ${e.instructionName} w.[Var], BX\n    ${e.instructionName} w.[Var2], BX\n    ${e.instructionName} [BX], AX\n    ${e.instructionName} [BX+SI], DX\n    ${e.instructionName} [BX+SI+10h], SP\n    ${e.instructionName} [BX+SI+100h], DI\n`))}function h(e){return l.createElement(r.Z,{type:"danger",title:"Warning"},l.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a constant. The first operand is a memory location whose address is contained in a register (or) an offset. The first operand might also have an displacement."),l.createElement("p",null,"Example: "),l.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} [BX], 0FFh\n${e.instructionName} [BX+SI], 0FFh\n${e.instructionName} [BX+SI+10h], 0FFh\n${e.instructionName} [BX+SI+100h], 0FFh\n`))}function p(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a constant. The first operand is a memory location whose address is specified directly in the instruction."),l.createElement("p",null,"Example: "),l.createElement(a.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} [BX], 0FFh\n${e.instructionName} [BX+SI], 0FFh\n${e.instructionName} [BX+SI+10h], 0FFh\n${e.instructionName} [BX+SI+100h], 0FFh\n`))}function g(e){return l.createElement("table",null,l.createElement("thead",null,l.createElement("tr",null,l.createElement("th",null,"Operand"),l.createElement("th",null,"Opcode"),l.createElement("th",null,"Size(bytes)"),l.createElement("th",null,"Example instruction"))),l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,"reg16, indirect mem"),l.createElement("td",null,e.reg_16bit_and_anything_ins," 0x00..=0x3F"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AX, [BX]`)),l.createElement("tr",null,l.createElement("td",null,"reg16, direct mem"),l.createElement("td",null,e.reg_16bit_and_anything_ins," ","0x06 | reg_idx << 3"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} DX, [0x100]`)),l.createElement("tr",null,l.createElement("td",null,"reg16, indirect mem with 8bit offset"),l.createElement("td",null,e.reg_16bit_and_anything_ins," 0x40..=0x7F 0x00..=0xFF"),l.createElement("td",null,"3"),l.createElement("td",null,`${e.instructionName} AX, [BX+0x10]`)),l.createElement("tr",null,l.createElement("td",null,"reg16, indirect mem with 16bit offset"),l.createElement("td",null,e.reg_16bit_and_anything_ins," 0x80..=0xBF 0x00..=0xFF"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} AX, [BX+0x100]`)),l.createElement("tr",null,l.createElement("td",null,"reg16, reg16"),l.createElement("td",null,e.reg_16bit_and_anything_ins," 0xC0..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AX, BX`)),l.createElement("tr",null,l.createElement("td",null,"reg8, indirect mem"),l.createElement("td",null,e.reg_8bit_and_anything_ins," 0x00..=0x3F"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AL, [BX]`)),l.createElement("tr",null,l.createElement("td",null,"reg8, direct mem"),l.createElement("td",null,e.reg_8bit_and_anything_ins," ","0x06 | reg_idx << 3"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} CL, [0x100]`)),l.createElement("tr",null,l.createElement("td",null,"reg8, indirect mem with 8bit offset"),l.createElement("td",null,e.reg_8bit_and_anything_ins," 0x40..=0x7F 0x00..=0xFF"),l.createElement("td",null,"3"),l.createElement("td",null,`${e.instructionName} AL, [BX+0x10]`)),l.createElement("tr",null,l.createElement("td",null,"reg8, indirect mem with 16bit offset"),l.createElement("td",null,e.reg_8bit_and_anything_ins," 0x80..=0xBF 0x00..=0xFF"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} AL, [BX+0x100]`)),l.createElement("tr",null,l.createElement("td",null,"reg8, reg8"),l.createElement("td",null,e.reg_8bit_and_anything_ins," 0xC0..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AL, BL`)),l.createElement("tr",null,l.createElement("td",null,"indirect mem, reg 16"),l.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x00..=0x3F"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} [BX+SI], AX`)),l.createElement("tr",null,l.createElement("td",null,"direct mem, reg 16"),l.createElement("td",null,e.indexed_addressing_and_anyting_ins," ","0x06 | reg_idx << 3"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} [0x100], BP`)),l.createElement("tr",null,l.createElement("td",null,"indirect mem with 8bit offset, reg 16"),l.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x40..=0x7F 0x00..=0xFF"),l.createElement("td",null,"3"),l.createElement("td",null,`${e.instructionName} [BX+SI+0x10], CX`)),l.createElement("tr",null,l.createElement("td",null,"indirect mem with 16bit offset, reg 16"),l.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x80..=0xBF 0x00..=0xFF"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} [BX+SI+0x100], DX`)),l.createElement("tr",null,l.createElement("td",null,"direct mem, reg 8"),l.createElement("td",null,e.addr_and_8bit_reg," ","0x06 | reg_idx << 3"),l.createElement("td",null,"4"),l.createElement("td",null,`${e.instructionName} [0x100], AL`)),l.createElement("tr",null,l.createElement("td",null,"AL, num"),l.createElement("td",null,e.al_and_num_ins," 0x00..=0xFF 0x00..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AL, 0x10`)),l.createElement("tr",null,l.createElement("td",null,"AX, num"),l.createElement("td",null,e.ax_and_num_ins," 0x00..=0xFF 0x00..=0xFF"),l.createElement("td",null,"3"),l.createElement("td",null,`${e.instructionName} AX, 0x100`)),l.createElement("tr",null,l.createElement("td",null,"reg16, num16"),l.createElement("td",null,e.reg16bit_and_16bit_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF 0x00..=0xFF"),l.createElement("td",null,"3"),l.createElement("td",null,`${e.instructionName} DX, 0x100`)),l.createElement("tr",null,l.createElement("td",null,"reg16, num8"),l.createElement("td",null,e.reg16bit_and_8bit_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} CX, 0x10`)),l.createElement("tr",null,l.createElement("td",null,"reg8, num"),l.createElement("td",null,e.reg8bit_and_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} AL, 0x10`)),l.createElement("tr",null,l.createElement("td",null,"direct address, num16"),l.createElement("td",null,e.addr16bit_and_16bit_num," ",e.addr_num_sub_ins,"+reg_idx"," ","[0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF 0x00..=0xFF"),l.createElement("td",null,"6"),l.createElement("td",null,`${e.instructionName} [0x100], 0x100`)),l.createElement("tr",null,l.createElement("td",null,"direct address, num8"),l.createElement("td",null,e.addr16bit_and_16bit_num," ",e.addr_num_sub_ins,"+reg_idx"," ","[0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF"," "),l.createElement("td",null,"5"),l.createElement("td",null,`${e.instructionName} [0x100], 0x10`)),l.createElement("tr",null,l.createElement("td",null,"addr8, num"),l.createElement("td",null,e.addr8bit_and_num," ",e.addr_num_sub_ins,"+reg_idx [0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF"),l.createElement("td",null,"2"),l.createElement("td",null,`${e.instructionName} b.[0x100], 0x10`))))}},2489:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>E,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var l=n(7462),a=(n(7294),n(3905)),r=n(7898);const i={title:"LES",description:"Loads the value in the effective address into the destination register & Loads ES with the next word."},m=void 0,s={unversionedId:"Instructions/LES",id:"Instructions/LES",title:"LES",description:"Loads the value in the effective address into the destination register & Loads ES with the next word.",source:"@site/docs/Instructions/LES.mdx",sourceDirName:"Instructions",slug:"/Instructions/LES",permalink:"/emu_8086/docs/Instructions/LES",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/LES.mdx",tags:[],version:"current",frontMatter:{title:"LES",description:"Loads the value in the effective address into the destination register & Loads ES with the next word."},sidebar:"tutorialSidebar",previous:{title:"LEA",permalink:"/emu_8086/docs/Instructions/LEA"},next:{title:"MOV",permalink:"/emu_8086/docs/Instructions/MOV"}},u={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Explanation",id:"explanation",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register And Memory",id:"register-and-memory",level:3}],d={toc:c},o="wrapper";function E(e){let{components:t,...n}=e;return(0,a.kt)(o,(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm6502"},"LES operand1, operand2\n")),(0,a.kt)("h2",{id:"attributes"},"Attributes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Operands")),(0,a.kt)("td",{parentName:"tr",align:null},"The destination operand is a general-purpose register. The source operand is a memory location.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Operation")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"DEST \u2190 SRC; ES \u2190 SRC+2"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Size")),(0,a.kt)("td",{parentName:"tr",align:null},"2 (to) 6 bytes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Action")),(0,a.kt)("td",{parentName:"tr",align:null},"Performs Memory Indirect Read and puts the value in the memory location into the destination register. Loads ES with the next word.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Flags")),(0,a.kt)("td",{parentName:"tr",align:null},"None")))),(0,a.kt)("h2",{id:"explanation"},"Explanation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm6502",metastring:"showLineNumbers",showLineNumbers:!0},"MOV [BX]     , 0x1234\nMOV [BX+0x02], 0x5678\nLES AX, [BX] ; AX = 0x1234, ES = 0x5678\n")),(0,a.kt)("p",null,"Here the value at the memory location ",(0,a.kt)("inlineCode",{parentName:"p"},"0x1234")," is loaded into the ",(0,a.kt)("inlineCode",{parentName:"p"},"AX")," register and the value at the memory location ",(0,a.kt)("inlineCode",{parentName:"p"},"0x1236")," is loaded into the ",(0,a.kt)("inlineCode",{parentName:"p"},"ES")," register.\ni.e the values of the registers are as follows : "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"AX = 0x1234\nES = 0x5678\n")),(0,a.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,a.kt)("h3",{id:"register-and-memory"},"Register And Memory"),(0,a.kt)(r.W7,{instructionName:"LES",mdxType:"RegisterAndMemoryAddressing"}))}E.isMDXComponent=!0}}]);