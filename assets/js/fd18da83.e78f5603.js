"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7934],{7898:(e,t,n)=>{n.d(t,{PM:()=>d,PP:()=>g,Py:()=>c,VY:()=>i,W7:()=>o,YH:()=>h,kp:()=>p,lh:()=>u,mL:()=>m,qT:()=>E,vR:()=>s});var a=n(7294),l=n(614),r=n(3612);function i(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register."),a.createElement("p",null,"Example:"),a.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} AX, BX \n${e.instructionName} BL, CH`),a.createElement("hr",null))}function s(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a constant."),a.createElement("p",null,"Example:"),a.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} AX, 0FFh \n${e.instructionName} BX, 0Bh  \n${e.instructionName} CL, 0h`),a.createElement("hr",null))}function d(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location."),a.createElement("p",null,"Example:"),a.createElement(l.Z,{language:"asm6502"},e.instructionName," AX, [0x100] ",a.createElement("br",null),e.instructionName," AL, b.[0x100] ",a.createElement("br",null)),"(or) Alternatively you can specify the memory location using the `variable assignment`",a.createElement("p",null,"Example"),a.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`ORG 100h \n.DATA\n  VAR1 DB 0FFh\n  VAR2 DW 0Bh\nCODE:\n  ${e.instructionName} AL, Var1 \n  ${e.instructionName} BX, Var2 \n  ${e.instructionName} CL, b.[Var2] \n  ${e.instructionName} DX, w.[Var1]`),a.createElement("hr",null))}function m(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register."),a.createElement("p",null,"Example:"),a.createElement(l.Z,{language:"asm6502"},e.instructionName," AX, [BX] ",a.createElement("br",null),e.instructionName," AL, b.[BX] ",a.createElement("br",null)),a.createElement("hr",null))}function c(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset."),a.createElement("p",null,"Example:"),a.createElement(l.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI] ",a.createElement("br",null),e.instructionName," AL, b.[BX+SI] ",a.createElement("br",null)),a.createElement("hr",null))}function u(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset and a displacement."),a.createElement("p",null,"Example:"),a.createElement(l.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI+10h] ",a.createElement("br",null),e.instructionName," AX, [BX+SI+100h] ",a.createElement("br",null),e.instructionName," AL, b.[BX+SI+10h] ",a.createElement("br",null),e.instructionName," AL, b.[BX+SI+100h] ",a.createElement("br",null)),a.createElement("hr",null))}function o(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified as a register while the other operand is specified as a memory location. The second operand is a memory location whose address is contained in a register (or) an offset. The second operand might also have an displacement."),a.createElement("p",null,"Example: "),a.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`org 100h\ndata\n    VAR DB 0FFh\n    VAR2 DW 0Bh\ncode:\n    ${e.instructionName} BX, Var\n    ${e.instructionName} BX, w.[Var]\n    ${e.instructionName} BX, w.[Var2]\n    ${e.instructionName} AX, [BX]\n    ${e.instructionName} DX, [BX+SI]\n    ${e.instructionName} SP, [BX+SI+10h]\n    ${e.instructionName} DI, [BX+SI+100h]\n`))}function g(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a register. The first operand is a memory location whose address is contained in a register (or) an offset. The first operand might also have an displacement."),a.createElement("p",null,"Example: "),a.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`org 100h\ndata\n    VAR DB 0FFh\n    VAR2 DW 0Bh\ncode:\n    ${e.instructionName} Var, BX\n    ${e.instructionName} w.[Var], BX\n    ${e.instructionName} w.[Var2], BX\n    ${e.instructionName} [BX], AX\n    ${e.instructionName} [BX+SI], DX\n    ${e.instructionName} [BX+SI+10h], SP\n    ${e.instructionName} [BX+SI+100h], DI\n`))}function E(e){return a.createElement(r.Z,{type:"danger",title:"Warning"},a.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a constant. The first operand is a memory location whose address is contained in a register (or) an offset. The first operand might also have an displacement."),a.createElement("p",null,"Example: "),a.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} [BX], 0FFh\n${e.instructionName} [BX+SI], 0FFh\n${e.instructionName} [BX+SI+10h], 0FFh\n${e.instructionName} [BX+SI+100h], 0FFh\n`))}function p(e){return a.createElement(a.Fragment,null,a.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a constant. The first operand is a memory location whose address is specified directly in the instruction."),a.createElement("p",null,"Example: "),a.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} [BX], 0FFh\n${e.instructionName} [BX+SI], 0FFh\n${e.instructionName} [BX+SI+10h], 0FFh\n${e.instructionName} [BX+SI+100h], 0FFh\n`))}function h(e){return a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Operand"),a.createElement("th",null,"Opcode"),a.createElement("th",null,"Size(bytes)"),a.createElement("th",null,"Example instruction"))),a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",null,"reg16, indirect mem"),a.createElement("td",null,e.reg_16bit_and_anything_ins," 0x00..=0x3F"),a.createElement("td",null,"2"),a.createElement("td",null,`${e.instructionName} AX, [BX]`)),a.createElement("tr",null,a.createElement("td",null,"reg16, direct mem"),a.createElement("td",null,e.reg_16bit_and_anything_ins," ","0x06 | reg_idx << 3"),a.createElement("td",null,"4"),a.createElement("td",null,`${e.instructionName} DX, [0x100]`)),a.createElement("tr",null,a.createElement("td",null,"reg16, indirect mem with 8bit offset"),a.createElement("td",null,e.reg_16bit_and_anything_ins," 0x40..=0x7F 0x00..=0xFF"),a.createElement("td",null,"3"),a.createElement("td",null,`${e.instructionName} AX, [BX+0x10]`)),a.createElement("tr",null,a.createElement("td",null,"reg16, indirect mem with 16bit offset"),a.createElement("td",null,e.reg_16bit_and_anything_ins," 0x80..=0xBF 0x00..=0xFF"),a.createElement("td",null,"4"),a.createElement("td",null,`${e.instructionName} AX, [BX+0x100]`)),a.createElement("tr",null,a.createElement("td",null,"reg16, reg16"),a.createElement("td",null,e.reg_16bit_and_anything_ins," 0xC0..=0xFF"),a.createElement("td",null,"2"),a.createElement("td",null,`${e.instructionName} AX, BX`)),a.createElement("tr",null,a.createElement("td",null,"reg8, indirect mem"),a.createElement("td",null,e.reg_8bit_and_anything_ins," 0x00..=0x3F"),a.createElement("td",null,"2"),a.createElement("td",null,`${e.instructionName} AL, [BX]`)),a.createElement("tr",null,a.createElement("td",null,"reg8, direct mem"),a.createElement("td",null,e.reg_8bit_and_anything_ins," ","0x06 | reg_idx << 3"),a.createElement("td",null,"4"),a.createElement("td",null,`${e.instructionName} CL, [0x100]`)),a.createElement("tr",null,a.createElement("td",null,"reg8, indirect mem with 8bit offset"),a.createElement("td",null,e.reg_8bit_and_anything_ins," 0x40..=0x7F 0x00..=0xFF"),a.createElement("td",null,"3"),a.createElement("td",null,`${e.instructionName} AL, [BX+0x10]`)),a.createElement("tr",null,a.createElement("td",null,"reg8, indirect mem with 16bit offset"),a.createElement("td",null,e.reg_8bit_and_anything_ins," 0x80..=0xBF 0x00..=0xFF"),a.createElement("td",null,"4"),a.createElement("td",null,`${e.instructionName} AL, [BX+0x100]`)),a.createElement("tr",null,a.createElement("td",null,"reg8, reg8"),a.createElement("td",null,e.reg_8bit_and_anything_ins," 0xC0..=0xFF"),a.createElement("td",null,"2"),a.createElement("td",null,`${e.instructionName} AL, BL`)),a.createElement("tr",null,a.createElement("td",null,"indirect mem, reg 16"),a.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x00..=0x3F"),a.createElement("td",null,"2"),a.createElement("td",null,`${e.instructionName} [BX+SI], AX`)),a.createElement("tr",null,a.createElement("td",null,"direct mem, reg 16"),a.createElement("td",null,e.indexed_addressing_and_anyting_ins," ","0x06 | reg_idx << 3"),a.createElement("td",null,"4"),a.createElement("td",null,`${e.instructionName} [0x100], BP`)),a.createElement("tr",null,a.createElement("td",null,"indirect mem with 8bit offset, reg 16"),a.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x40..=0x7F 0x00..=0xFF"),a.createElement("td",null,"3"),a.createElement("td",null,`${e.instructionName} [BX+SI+0x10], CX`)),a.createElement("tr",null,a.createElement("td",null,"indirect mem with 16bit offset, reg 16"),a.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x80..=0xBF 0x00..=0xFF"),a.createElement("td",null,"4"),a.createElement("td",null,`${e.instructionName} [BX+SI+0x100], DX`)),a.createElement("tr",null,a.createElement("td",null,"direct mem, reg 8"),a.createElement("td",null,e.addr_and_8bit_reg," ","0x06 | reg_idx << 3"),a.createElement("td",null,"4"),a.createElement("td",null,`${e.instructionName} [0x100], AL`)),a.createElement("tr",null,a.createElement("td",null,"AL, num"),a.createElement("td",null,e.al_and_num_ins," 0x00..=0xFF 0x00..=0xFF"),a.createElement("td",null,"2"),a.createElement("td",null,`${e.instructionName} AL, 0x10`)),a.createElement("tr",null,a.createElement("td",null,"AX, num"),a.createElement("td",null,e.ax_and_num_ins," 0x00..=0xFF 0x00..=0xFF"),a.createElement("td",null,"3"),a.createElement("td",null,`${e.instructionName} AX, 0x100`)),a.createElement("tr",null,a.createElement("td",null,"reg16, num16"),a.createElement("td",null,e.reg16bit_and_16bit_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF 0x00..=0xFF"),a.createElement("td",null,"3"),a.createElement("td",null,`${e.instructionName} DX, 0x100`)),a.createElement("tr",null,a.createElement("td",null,"reg16, num8"),a.createElement("td",null,e.reg16bit_and_8bit_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF"),a.createElement("td",null,"2"),a.createElement("td",null,`${e.instructionName} CX, 0x10`)),a.createElement("tr",null,a.createElement("td",null,"reg8, num"),a.createElement("td",null,e.reg8bit_and_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF"),a.createElement("td",null,"2"),a.createElement("td",null,`${e.instructionName} AL, 0x10`)),a.createElement("tr",null,a.createElement("td",null,"direct address, num16"),a.createElement("td",null,e.addr16bit_and_16bit_num," ",e.addr_num_sub_ins,"+reg_idx"," ","[0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF 0x00..=0xFF"),a.createElement("td",null,"6"),a.createElement("td",null,`${e.instructionName} [0x100], 0x100`)),a.createElement("tr",null,a.createElement("td",null,"direct address, num8"),a.createElement("td",null,e.addr16bit_and_16bit_num," ",e.addr_num_sub_ins,"+reg_idx"," ","[0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF"," "),a.createElement("td",null,"5"),a.createElement("td",null,`${e.instructionName} [0x100], 0x10`)),a.createElement("tr",null,a.createElement("td",null,"addr8, num"),a.createElement("td",null,e.addr8bit_and_num," ",e.addr_num_sub_ins,"+reg_idx [0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF"),a.createElement("td",null,"2"),a.createElement("td",null,`${e.instructionName} b.[0x100], 0x10`))))}},3749:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294);const l={tooltip:"tooltip_OfI_",tooltiptext:"tooltiptext_kMd9",bottomTooltiptext:"bottomTooltiptext_PBXK"};function r(e){let{children:t,text:n,toolTipPosition:r="top"}=e;const i="top"===r?l.tooltiptext:l.bottomTooltiptext;return a.createElement("div",{className:l.tooltip},t,a.createElement("span",{className:i},n))}const i=e=>{let{state:t}=e;return"changed"===t?a.createElement("span",{className:"badge badge--primary badge--rounded h-20"},a.createElement("span",{className:"badge__text"},a.createElement(r,{text:"Changes"},"C"))):"unchanged"===t?a.createElement("span",{className:"badge badge--secondary badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(r,{text:"Doesn't change"},"NC"))):1==t?a.createElement("span",{className:"badge badge--success badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(r,{text:"Changed to 1"},"1"))):0==t?a.createElement("span",{className:"badge badge--danger badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(r,{text:"Changed to 0"},"0"))):a.createElement("span",{className:"badge badge--warning badge--rounded"},a.createElement("span",{className:"badge__text"},"Unknown"))};function s(e){let{carryFlag:t=null,zeroFlag:n=null,signFlag:l=null,overflowFlag:s=null,parityFlag:d=null,auxiliaryCarryFlag:m=null}=e;const c={carryFlag:t,zeroFlag:n,signFlag:l,overflowFlag:s,parityFlag:d,auxiliaryCarryFlag:m};return a.createElement("table",{className:"table table--striped table--responsive flags_table"},a.createElement("thead",null,a.createElement("tr",null,Object.entries(c).map((e=>{let[t,n]=e;return null==n?null:a.createElement("th",null,a.createElement(r,{text:t,toolTipPosition:"bottom"},t[0].toUpperCase()))})))),a.createElement("tbody",null,a.createElement("tr",null,Object.values(c).map((e=>null==e?null:a.createElement("td",null,a.createElement(i,{state:e})))))))}},4863:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>E,frontMatter:()=>s,metadata:()=>m,toc:()=>u});var a=n(7462),l=(n(7294),n(3905)),r=n(3749),i=n(7898);const s={title:"TEST",description:"Performs a bitwise AND operation on the two operands."},d=void 0,m={unversionedId:"Instructions/TEST",id:"Instructions/TEST",title:"TEST",description:"Performs a bitwise AND operation on the two operands.",source:"@site/docs/Instructions/TEST.mdx",sourceDirName:"Instructions",slug:"/Instructions/TEST",permalink:"/emu_8086/docs/Instructions/TEST",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/TEST.mdx",tags:[],version:"current",frontMatter:{title:"TEST",description:"Performs a bitwise AND operation on the two operands."},sidebar:"tutorialSidebar",previous:{title:"OR",permalink:"/emu_8086/docs/Instructions/OR"},next:{title:"XOR",permalink:"/emu_8086/docs/Instructions/XOR"}},c={},u=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register Addressing",id:"register-addressing",level:3},{value:"Immediate Addressing Mode",id:"immediate-addressing-mode",level:3},{value:"MemoryAddressingMode",id:"memoryaddressingmode",level:3},{value:"RegisterIndirectAddressingMode",id:"registerindirectaddressingmode",level:3},{value:"BasePlusIndexedAddressingMode",id:"baseplusindexedaddressingmode",level:3},{value:"BasePlusIndexPlusDisplacementAddressingMode",id:"baseplusindexplusdisplacementaddressingmode",level:3}],o={toc:u},g="wrapper";function E(e){let{components:t,...n}=e;return(0,l.kt)(g,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"syntax"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-asm6502"},"TEST operand1, operand2\n")),(0,l.kt)("h2",{id:"attributes"},"Attributes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Size")),(0,l.kt)("td",{parentName:"tr",align:null},"Byte, Word, Doubleword, 3 Bytes, 5 Bytes (or) 6 Bytes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Operands")),(0,l.kt)("td",{parentName:"tr",align:null},"The first operand is a general-purpose register or memory location. The second operand is a general-purpose register, memory location, or immediate value.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Action")),(0,l.kt)("td",{parentName:"tr",align:null},"Performs a bitwise AND operation on the two operands. The result is discarded.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Flags")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)(r.Z,{carryFlag:!1,overflowFlag:!1,zeroFlag:"changed",signFlag:"changed",parityFlag:"changed",mdxType:"FlagsChangedTable"}))))),(0,l.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,l.kt)("h3",{id:"register-addressing"},"Register Addressing"),(0,l.kt)(i.VY,{instructionName:"TEST",mdxType:"RegisterAddressingMode"}),(0,l.kt)("h3",{id:"immediate-addressing-mode"},"Immediate Addressing Mode"),(0,l.kt)(i.vR,{instructionName:"TEST",mdxType:"ImmediateAddressingMode"}),(0,l.kt)("h3",{id:"memoryaddressingmode"},"MemoryAddressingMode"),(0,l.kt)(i.PM,{instructionName:"TEST",mdxType:"MemoryAddressingMode"}),(0,l.kt)("h3",{id:"registerindirectaddressingmode"},"RegisterIndirectAddressingMode"),(0,l.kt)(i.mL,{instructionName:"TEST",mdxType:"RegisterIndirectAddressingMode"}),(0,l.kt)("h3",{id:"baseplusindexedaddressingmode"},"BasePlusIndexedAddressingMode"),(0,l.kt)(i.Py,{instructionName:"TEST",mdxType:"BasePlusIndexedAddressingMode"}),(0,l.kt)("h3",{id:"baseplusindexplusdisplacementaddressingmode"},"BasePlusIndexPlusDisplacementAddressingMode"),(0,l.kt)(i.lh,{instructionName:"TEST",mdxType:"BasePlusIndexPlusDisplacementAddressingMode"}))}E.isMDXComponent=!0}}]);