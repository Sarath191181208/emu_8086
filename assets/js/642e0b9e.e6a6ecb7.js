"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8194],{3749:(e,t,r)=>{r.d(t,{Z:()=>o});var a=r(7294);const n={tooltip:"tooltip_OfI_",tooltiptext:"tooltiptext_kMd9",bottomTooltiptext:"bottomTooltiptext_PBXK"};function s(e){let{children:t,text:r,toolTipPosition:s="top"}=e;const i="top"===s?n.tooltiptext:n.bottomTooltiptext;return a.createElement("div",{className:n.tooltip},t,a.createElement("span",{className:i},r))}const i=e=>{let{state:t}=e;return"changed"===t?a.createElement("span",{className:"badge badge--primary badge--rounded h-20"},a.createElement("span",{className:"badge__text"},a.createElement(s,{text:"Changes"},"C"))):"unchanged"===t?a.createElement("span",{className:"badge badge--secondary badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(s,{text:"Doesn't change"},"NC"))):1==t?a.createElement("span",{className:"badge badge--success badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(s,{text:"Changed to 1"},"1"))):0==t?a.createElement("span",{className:"badge badge--danger badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(s,{text:"Changed to 0"},"0"))):a.createElement("span",{className:"badge badge--warning badge--rounded"},a.createElement("span",{className:"badge__text"},"Unknown"))};function o(e){let{carryFlag:t=null,zeroFlag:r=null,signFlag:n=null,overflowFlag:o=null,parityFlag:d=null,auxiliaryCarryFlag:l=null}=e;const c={carryFlag:t,zeroFlag:r,signFlag:n,overflowFlag:o,parityFlag:d,auxiliaryCarryFlag:l};return a.createElement("table",{className:"table table--striped table--responsive flags_table"},a.createElement("thead",null,a.createElement("tr",null,Object.entries(c).map((e=>{let[t,r]=e;return null==r?null:a.createElement("th",null,a.createElement(s,{text:t,toolTipPosition:"bottom"},t[0].toUpperCase()))})))),a.createElement("tbody",null,a.createElement("tr",null,Object.values(c).map((e=>null==e?null:a.createElement("td",null,a.createElement(i,{state:e})))))))}},4215:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var a=r(7462),n=(r(7294),r(3905)),s=(r(3749),r(7898));const i={title:"XCHG",description:"Exchange the contents of two registers or a register and a memory location."},o=void 0,d={unversionedId:"Instructions/XCHG",id:"Instructions/XCHG",title:"XCHG",description:"Exchange the contents of two registers or a register and a memory location.",source:"@site/docs/Instructions/XCHG.mdx",sourceDirName:"Instructions",slug:"/Instructions/XCHG",permalink:"/emu_8086/docs/Instructions/XCHG",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/XCHG.mdx",tags:[],version:"current",frontMatter:{title:"XCHG",description:"Exchange the contents of two registers or a register and a memory location."},sidebar:"tutorialSidebar",previous:{title:"TEST",permalink:"/emu_8086/docs/Instructions/TEST"},next:{title:"XOR",permalink:"/emu_8086/docs/Instructions/XOR"}},l={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Example",id:"example",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register, Register Addressing",id:"register-register-addressing",level:3},{value:"Register, Direct Memory Addressing",id:"register-direct-memory-addressing",level:3},{value:"Register, Direct/Indirect Memory Addressing With (or) Without Displacement",id:"register-directindirect-memory-addressing-with-or-without-displacement",level:3},{value:"Direct/Indirect Memory Addressing With (or) Without Displacement , Register Addressing",id:"directindirect-memory-addressing-with-or-without-displacement--register-addressing",level:3}],m={toc:c},g="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(g,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"syntax"},"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-asm6502"},"XOR operand1, operand2\n")),(0,n.kt)("h2",{id:"attributes"},"Attributes"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Attribute"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Operands")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The first operand is a general purpose register or a memory location. The second operand is a general purpose register or a memory location.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Operation")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"operand1, operand2 = operand2, operand1"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Action")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The contents of the first operand are exchanged with the contents of the second operand.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Size")),(0,n.kt)("td",{parentName:"tr",align:"left"},"2 to 6 Bytes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Flags")),(0,n.kt)("td",{parentName:"tr",align:"left"},"No flags are affected.")))),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-asm6502",metastring:"showLineNumbers",showLineNumbers:!0},"MOV AX, 0x10; This is the hex number 10 = 16 in decimal\nMOV BX, 10O ; This is the ocatal number 10  = 8 in decimal\nXCHG AX, BX ; Exchange the contents of AX and BX\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The contents of AX are now changed with the contents of BX. ",(0,n.kt)("br",null),"\nAX now contains 8 and BX now contains 16.")),(0,n.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,n.kt)("h3",{id:"register-register-addressing"},"Register, Register Addressing"),(0,n.kt)(s.VY,{instructionName:"XCHG",mdxType:"RegisterAddressingMode"}),(0,n.kt)("h3",{id:"register-direct-memory-addressing"},"Register, Direct Memory Addressing"),(0,n.kt)(s.PM,{instructionName:"XCHG",mdxType:"MemoryAddressingMode"}),(0,n.kt)("h3",{id:"register-directindirect-memory-addressing-with-or-without-displacement"},"Register, Direct/Indirect Memory Addressing With (or) Without Displacement"),(0,n.kt)(s.W7,{instructionName:"XCHG",mdxType:"RegisterAndMemoryAddressing"}),(0,n.kt)("h3",{id:"directindirect-memory-addressing-with-or-without-displacement--register-addressing"},"Direct/Indirect Memory Addressing With (or) Without Displacement , Register Addressing"),(0,n.kt)(s.PP,{instructionName:"XCHG",mdxType:"MemoryAndRegisterAddressing"}))}p.isMDXComponent=!0}}]);