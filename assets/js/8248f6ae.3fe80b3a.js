"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5784],{3749:(e,t,r)=>{r.d(t,{Z:()=>d});var a=r(7294);const n={tooltip:"tooltip_OfI_",tooltiptext:"tooltiptext_kMd9",bottomTooltiptext:"bottomTooltiptext_PBXK"};function i(e){let{children:t,text:r,toolTipPosition:i="top"}=e;const s="top"===i?n.tooltiptext:n.bottomTooltiptext;return a.createElement("div",{className:n.tooltip},t,a.createElement("span",{className:s},r))}const s=e=>{let{state:t}=e;return"changed"===t?a.createElement("span",{className:"badge badge--primary badge--rounded h-20"},a.createElement("span",{className:"badge__text"},a.createElement(i,{text:"Changes"},"C"))):"unchanged"===t?a.createElement("span",{className:"badge badge--secondary badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(i,{text:"Doesn't change"},"NC"))):1==t?a.createElement("span",{className:"badge badge--success badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(i,{text:"Changed to 1"},"1"))):0==t?a.createElement("span",{className:"badge badge--danger badge--rounded"},a.createElement("span",{className:"badge__text"},a.createElement(i,{text:"Changed to 0"},"0"))):a.createElement("span",{className:"badge badge--warning badge--rounded"},a.createElement("span",{className:"badge__text"},"Unknown"))};function d(e){let{carryFlag:t=null,zeroFlag:r=null,signFlag:n=null,overflowFlag:d=null,parityFlag:l=null,auxiliaryCarryFlag:o=null}=e;const m={carryFlag:t,zeroFlag:r,signFlag:n,overflowFlag:d,parityFlag:l,auxiliaryCarryFlag:o};return a.createElement("table",{className:"table table--striped table--responsive flags_table"},a.createElement("thead",null,a.createElement("tr",null,Object.entries(m).map((e=>{let[t,r]=e;return null==r?null:a.createElement("th",null,a.createElement(i,{text:t,toolTipPosition:"bottom"},t[0].toUpperCase()))})))),a.createElement("tbody",null,a.createElement("tr",null,Object.values(m).map((e=>null==e?null:a.createElement("td",null,a.createElement(s,{state:e})))))))}},3520:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>o,toc:()=>c});var a=r(7462),n=(r(7294),r(3905)),i=r(3749),s=r(7898);const d={title:"OR",description:"Performs a logical OR of the first operand with the second operand and stores the result in the first operand."},l=void 0,o={unversionedId:"Instructions/OR",id:"Instructions/OR",title:"OR",description:"Performs a logical OR of the first operand with the second operand and stores the result in the first operand.",source:"@site/docs/Instructions/OR.mdx",sourceDirName:"Instructions",slug:"/Instructions/OR",permalink:"/emu_8086/docs/Instructions/OR",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/OR.mdx",tags:[],version:"current",frontMatter:{title:"OR",description:"Performs a logical OR of the first operand with the second operand and stores the result in the first operand."},sidebar:"tutorialSidebar",previous:{title:"MOV",permalink:"/emu_8086/docs/Instructions/MOV"},next:{title:"SBB",permalink:"/emu_8086/docs/Instructions/SBB"}},m={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Example",id:"example",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register, Register Addressing",id:"register-register-addressing",level:3},{value:"Register, Immediate Value Addressing",id:"register-immediate-value-addressing",level:3},{value:"Register, Direct Memory Addressing",id:"register-direct-memory-addressing",level:3},{value:"Register, Direct/Indirect Memory Addressing With (or) Without Displacement",id:"register-directindirect-memory-addressing-with-or-without-displacement",level:3},{value:"Direct/Indirect Memory Addressing With (or) Without Displacement , Register Addressing",id:"directindirect-memory-addressing-with-or-without-displacement--register-addressing",level:3},{value:"Direct/Indirect, Immediate Value Addressing",id:"directindirect-immediate-value-addressing",level:3},{value:"Indirect Memory Addressing With (or) Without Displacement, Immediate Value Addressing",id:"indirect-memory-addressing-with-or-without-displacement-immediate-value-addressing",level:3}],g={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"syntax"},"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-asm6502"},"OR operand1, operand2\n")),(0,n.kt)("h2",{id:"attributes"},"Attributes"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Attribute"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Operands")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The first operand is an general purpose register or a memory location. The second operand is a general-purpose register, memory location, or immediate value.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Operation")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"operand1 = operand1 OR operand2"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Size")),(0,n.kt)("td",{parentName:"tr",align:"left"},"2 to 6 bytes.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Action")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Performs a logical OR of the first operand with the second operand and stores the result in the first operand.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Flags")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)(i.Z,{carryFlag:!1,overflowFlag:!1,zeroFlag:"changed",signFlag:"changed",parityFlag:"changed",auxiliaryCarryFlag:"changed",mdxType:"FlagsChangedTable"}))))),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-asm6502",metastring:"showLineNumbers",showLineNumbers:!0},"MOV AX, 0x0001\nOR AX, 0x0002\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Here the value of ",(0,n.kt)("inlineCode",{parentName:"p"},"AX")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"0x0003")," after the ",(0,n.kt)("inlineCode",{parentName:"p"},"OR")," instruction is executed. ",(0,n.kt)("br",null),"\nThis is because 0x0001 = 0b0000_0000_0000_0001 and 0x0002 = 0b0000_0000_0000_0010. ",(0,n.kt)("br",null),"\nThe ",(0,n.kt)("inlineCode",{parentName:"p"},"OR")," operation is performed on each bit of the operands.",(0,n.kt)("br",null),"\nThe result is 0b0000_0000_0000_0011 which is 0x0003.")),(0,n.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,n.kt)("h3",{id:"register-register-addressing"},"Register, Register Addressing"),(0,n.kt)(s.VY,{instructionName:"OR",mdxType:"RegisterAddressingMode"}),(0,n.kt)("h3",{id:"register-immediate-value-addressing"},"Register, Immediate Value Addressing"),(0,n.kt)(s.vR,{instructionName:"OR",mdxType:"ImmediateAddressingMode"}),(0,n.kt)("h3",{id:"register-direct-memory-addressing"},"Register, Direct Memory Addressing"),(0,n.kt)(s.PM,{instructionName:"OR",mdxType:"MemoryAddressingMode"}),(0,n.kt)("h3",{id:"register-directindirect-memory-addressing-with-or-without-displacement"},"Register, Direct/Indirect Memory Addressing With (or) Without Displacement"),(0,n.kt)(s.W7,{instructionName:"OR",mdxType:"RegisterAndMemoryAddressing"}),(0,n.kt)("h3",{id:"directindirect-memory-addressing-with-or-without-displacement--register-addressing"},"Direct/Indirect Memory Addressing With (or) Without Displacement , Register Addressing"),(0,n.kt)(s.PP,{instructionName:"OR",mdxType:"MemoryAndRegisterAddressing"}),(0,n.kt)("h3",{id:"directindirect-immediate-value-addressing"},"Direct/Indirect, Immediate Value Addressing"),(0,n.kt)(s.kp,{instructionName:"OR",mdxType:"DirectMemoryAndImmediateAddressing"}),(0,n.kt)("h3",{id:"indirect-memory-addressing-with-or-without-displacement-immediate-value-addressing"},"Indirect Memory Addressing With (or) Without Displacement, Immediate Value Addressing"),(0,n.kt)(s.qT,{instructionName:"OR",mdxType:"IndirectMemoryAndImmediateAddressing"}))}u.isMDXComponent=!0}}]);