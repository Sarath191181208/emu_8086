"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[346],{7898:(e,t,n)=>{n.d(t,{PM:()=>s,PP:()=>E,Py:()=>u,VY:()=>i,W7:()=>o,YH:()=>g,kp:()=>p,lh:()=>d,mL:()=>c,qT:()=>h,vR:()=>m});var r=n(7294),l=n(614),a=n(3612);function i(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register."),r.createElement("p",null,"Example:"),r.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} AX, BX \n${e.instructionName} BL, CH`),r.createElement("hr",null))}function m(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a constant."),r.createElement("p",null,"Example:"),r.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} AX, 0FFh \n${e.instructionName} BX, 0Bh  \n${e.instructionName} CL, 0h`),r.createElement("hr",null))}function s(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location."),r.createElement("p",null,"Example:"),r.createElement(l.Z,{language:"asm6502"},e.instructionName," AX, [0x100] ",r.createElement("br",null),e.instructionName," AL, b.[0x100] ",r.createElement("br",null)),"(or) Alternatively you can specify the memory location using the `variable assignment`",r.createElement("p",null,"Example"),r.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`ORG 100h \n.DATA\n  VAR1 DB 0FFh\n  VAR2 DW 0Bh\nCODE:\n  ${e.instructionName} AL, Var1 \n  ${e.instructionName} BX, Var2 \n  ${e.instructionName} CL, b.[Var2] \n  ${e.instructionName} DX, w.[Var1]`),r.createElement("hr",null))}function c(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register."),r.createElement("p",null,"Example:"),r.createElement(l.Z,{language:"asm6502"},e.instructionName," AX, [BX] ",r.createElement("br",null),e.instructionName," AL, b.[BX] ",r.createElement("br",null)),r.createElement("hr",null))}function u(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset."),r.createElement("p",null,"Example:"),r.createElement(l.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI] ",r.createElement("br",null)),r.createElement("hr",null))}function d(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset and a displacement."),r.createElement("p",null,"Example:"),r.createElement(l.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI+10h] ",r.createElement("br",null),e.instructionName," AX, [BX+SI+100h] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI+10h] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI+100h] ",r.createElement("br",null)),r.createElement("hr",null))}function o(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified as a register while the other operand is specified as a memory location. The second operand is a memory location whose address is contained in a register (or) an offset. The second operand might also have an displacement."),r.createElement("p",null,"Example: "),r.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`org 100h\ndata\n    VAR DB 0FFh\n    VAR2 DW 0Bh\ncode:\n    ${e.instructionName} BX, Var\n    ${e.instructionName} BX, w.[Var]\n    ${e.instructionName} BX, w.[Var2]\n    ${e.instructionName} AX, [BX]\n    ${e.instructionName} DX, [BX+SI]\n    ${e.instructionName} SP, [BX+SI+10h]\n    ${e.instructionName} DI, [BX+SI+100h]\n`))}function E(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a register. The first operand is a memory location whose address is contained in a register (or) an offset. The first operand might also have an displacement."),r.createElement("p",null,"Example: "),r.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`org 100h\ndata\n    VAR DB 0FFh\n    VAR2 DW 0Bh\ncode:\n    ${e.instructionName} Var, BX\n    ${e.instructionName} w.[Var], BX\n    ${e.instructionName} w.[Var2], BX\n    ${e.instructionName} [BX], AX\n    ${e.instructionName} [BX+SI], DX\n    ${e.instructionName} [BX+SI+10h], SP\n    ${e.instructionName} [BX+SI+100h], DI\n`))}function h(e){return r.createElement(a.Z,{type:"danger",title:"Warning"},r.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a constant. The first operand is a memory location whose address is contained in a register (or) an offset. The first operand might also have an displacement."),r.createElement("p",null,"Example: "),r.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} [BX], 0FFh\n${e.instructionName} [BX+SI], 0FFh\n${e.instructionName} [BX+SI+10h], 0FFh\n${e.instructionName} [BX+SI+100h], 0FFh\n`))}function p(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified as a memory location while the other operand is specified as a constant. The first operand is a memory location whose address is specified directly in the instruction."),r.createElement("p",null,"Example: "),r.createElement(l.Z,{language:"asm6502",showLineNumbers:!0},`${e.instructionName} [BX], 0FFh\n${e.instructionName} [BX+SI], 0FFh\n${e.instructionName} [BX+SI+10h], 0FFh\n${e.instructionName} [BX+SI+100h], 0FFh\n`))}function g(e){return r.createElement("table",null,r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Operand"),r.createElement("th",null,"Opcode"),r.createElement("th",null,"Size(bytes)"),r.createElement("th",null,"Example instruction"))),r.createElement("tbody",null,r.createElement("tr",null,r.createElement("td",null,"reg16, indirect mem"),r.createElement("td",null,e.reg_16bit_and_anything_ins," 0x00..=0x3F"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AX, [BX]`)),r.createElement("tr",null,r.createElement("td",null,"reg16, direct mem"),r.createElement("td",null,e.reg_16bit_and_anything_ins," ","0x06 | reg_idx << 3"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} DX, [0x100]`)),r.createElement("tr",null,r.createElement("td",null,"reg16, indirect mem with 8bit offset"),r.createElement("td",null,e.reg_16bit_and_anything_ins," 0x40..=0x7F 0x00..=0xFF"),r.createElement("td",null,"3"),r.createElement("td",null,`${e.instructionName} AX, [BX+0x10]`)),r.createElement("tr",null,r.createElement("td",null,"reg16, indirect mem with 16bit offset"),r.createElement("td",null,e.reg_16bit_and_anything_ins," 0x80..=0xBF 0x00..=0xFF"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} AX, [BX+0x100]`)),r.createElement("tr",null,r.createElement("td",null,"reg16, reg16"),r.createElement("td",null,e.reg_16bit_and_anything_ins," 0xC0..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AX, BX`)),r.createElement("tr",null,r.createElement("td",null,"reg8, indirect mem"),r.createElement("td",null,e.reg_8bit_and_anything_ins," 0x00..=0x3F"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AL, [BX]`)),r.createElement("tr",null,r.createElement("td",null,"reg8, direct mem"),r.createElement("td",null,e.reg_8bit_and_anything_ins," ","0x06 | reg_idx << 3"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} CL, [0x100]`)),r.createElement("tr",null,r.createElement("td",null,"reg8, indirect mem with 8bit offset"),r.createElement("td",null,e.reg_8bit_and_anything_ins," 0x40..=0x7F 0x00..=0xFF"),r.createElement("td",null,"3"),r.createElement("td",null,`${e.instructionName} AL, [BX+0x10]`)),r.createElement("tr",null,r.createElement("td",null,"reg8, indirect mem with 16bit offset"),r.createElement("td",null,e.reg_8bit_and_anything_ins," 0x80..=0xBF 0x00..=0xFF"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} AL, [BX+0x100]`)),r.createElement("tr",null,r.createElement("td",null,"reg8, reg8"),r.createElement("td",null,e.reg_8bit_and_anything_ins," 0xC0..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AL, BL`)),r.createElement("tr",null,r.createElement("td",null,"indirect mem, reg 16"),r.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x00..=0x3F"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} [BX+SI], AX`)),r.createElement("tr",null,r.createElement("td",null,"direct mem, reg 16"),r.createElement("td",null,e.indexed_addressing_and_anyting_ins," ","0x06 | reg_idx << 3"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} [0x100], BP`)),r.createElement("tr",null,r.createElement("td",null,"indirect mem with 8bit offset, reg 16"),r.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x40..=0x7F 0x00..=0xFF"),r.createElement("td",null,"3"),r.createElement("td",null,`${e.instructionName} [BX+SI+0x10], CX`)),r.createElement("tr",null,r.createElement("td",null,"indirect mem with 16bit offset, reg 16"),r.createElement("td",null,e.indexed_addressing_and_anyting_ins," 0x80..=0xBF 0x00..=0xFF"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} [BX+SI+0x100], DX`)),r.createElement("tr",null,r.createElement("td",null,"direct mem, reg 8"),r.createElement("td",null,e.addr_and_8bit_reg," ","0x06 | reg_idx << 3"),r.createElement("td",null,"4"),r.createElement("td",null,`${e.instructionName} [0x100], AL`)),r.createElement("tr",null,r.createElement("td",null,"AL, num"),r.createElement("td",null,e.al_and_num_ins," 0x00..=0xFF 0x00..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AL, 0x10`)),r.createElement("tr",null,r.createElement("td",null,"AX, num"),r.createElement("td",null,e.ax_and_num_ins," 0x00..=0xFF 0x00..=0xFF"),r.createElement("td",null,"3"),r.createElement("td",null,`${e.instructionName} AX, 0x100`)),r.createElement("tr",null,r.createElement("td",null,"reg16, num16"),r.createElement("td",null,e.reg16bit_and_16bit_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF 0x00..=0xFF"),r.createElement("td",null,"3"),r.createElement("td",null,`${e.instructionName} DX, 0x100`)),r.createElement("tr",null,r.createElement("td",null,"reg16, num8"),r.createElement("td",null,e.reg16bit_and_8bit_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} CX, 0x10`)),r.createElement("tr",null,r.createElement("td",null,"reg8, num"),r.createElement("td",null,e.reg8bit_and_num," ",e.reg_num_sub_ins,"+reg_idx 0x00..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} AL, 0x10`)),r.createElement("tr",null,r.createElement("td",null,"direct address, num16"),r.createElement("td",null,e.addr16bit_and_16bit_num," ",e.addr_num_sub_ins,"+reg_idx"," ","[0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF 0x00..=0xFF"),r.createElement("td",null,"6"),r.createElement("td",null,`${e.instructionName} [0x100], 0x100`)),r.createElement("tr",null,r.createElement("td",null,"direct address, num8"),r.createElement("td",null,e.addr16bit_and_16bit_num," ",e.addr_num_sub_ins,"+reg_idx"," ","[0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF"," "),r.createElement("td",null,"5"),r.createElement("td",null,`${e.instructionName} [0x100], 0x10`)),r.createElement("tr",null,r.createElement("td",null,"addr8, num"),r.createElement("td",null,e.addr8bit_and_num," ",e.addr_num_sub_ins,"+reg_idx [0x00..=0xFF 0x00..=0xFF] 0x00..=0xFF"),r.createElement("td",null,"2"),r.createElement("td",null,`${e.instructionName} b.[0x100], 0x10`))))}},5389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>m,default:()=>E,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),l=(n(7294),n(3905)),a=n(7898);const i={title:"LEA",description:"Loads the Effective address of the source operand into the destination register."},m=void 0,s={unversionedId:"Instructions/LEA",id:"Instructions/LEA",title:"LEA",description:"Loads the Effective address of the source operand into the destination register.",source:"@site/docs/Instructions/LEA.mdx",sourceDirName:"Instructions",slug:"/Instructions/LEA",permalink:"/emu_8086/docs/Instructions/LEA",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/LEA.mdx",tags:[],version:"current",frontMatter:{title:"LEA",description:"Loads the Effective address of the source operand into the destination register."},sidebar:"tutorialSidebar",previous:{title:"AND",permalink:"/emu_8086/docs/Instructions/AND"},next:{title:"LES",permalink:"/emu_8086/docs/Instructions/LES"}},c={},u=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register And Memory",id:"register-and-memory",level:3}],d={toc:u},o="wrapper";function E(e){let{components:t,...n}=e;return(0,l.kt)(o,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"syntax"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-asm6502"},"LEA operand1, operand2 ; comment\n")),(0,l.kt)("h2",{id:"attributes"},"Attributes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Operands")),(0,l.kt)("td",{parentName:"tr",align:null},"The first operand is the destination register. The second operand is the source operand. operand1: Register, operand2: Memory")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Size")),(0,l.kt)("td",{parentName:"tr",align:null},"Word")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Action")),(0,l.kt)("td",{parentName:"tr",align:null},"Performs a memory indirect addressing operation. The effective address of the source operand is loaded into the destination register.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Flags")),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("admonition",{title:"INFO",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"For instructions such as ",(0,l.kt)("inlineCode",{parentName:"p"},"LEA AX, [0x100]")," (or) ",(0,l.kt)("inlineCode",{parentName:"p"},"LEA SP, Var")," the assembler will convert the instruction to ",(0,l.kt)("inlineCode",{parentName:"p"},"MOV AX, 0x100")," (or) ",(0,l.kt)("inlineCode",{parentName:"p"},"MOV SP, Var")," respectively.\nThis is because the ",(0,l.kt)("inlineCode",{parentName:"p"},"MOV")," instruction is much more efficient than the ",(0,l.kt)("inlineCode",{parentName:"p"},"LEA")," instruction.")),(0,l.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,l.kt)("h3",{id:"register-and-memory"},"Register And Memory"),(0,l.kt)(a.W7,{instructionName:"LEA",mdxType:"RegisterAndMemoryAddressing"}))}E.isMDXComponent=!0}}]);