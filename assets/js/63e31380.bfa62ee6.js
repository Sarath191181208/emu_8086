"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7591],{1895:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>D,frontMatter:()=>n,metadata:()=>s,toc:()=>m});var i=r(7462),d=(r(7294),r(3905));const n={title:"ADC",description:"Performs addition of operand1, operand2 and carry flag. Stores the result in operand1."},a=void 0,s={unversionedId:"Instructions/ADC",id:"Instructions/ADC",title:"ADC",description:"Performs addition of operand1, operand2 and carry flag. Stores the result in operand1.",source:"@site/docs/Instructions/ADC.mdx",sourceDirName:"Instructions",slug:"/Instructions/ADC",permalink:"/emu_8086/docs/Instructions/ADC",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/ADC.mdx",tags:[],version:"current",frontMatter:{title:"ADC",description:"Performs addition of operand1, operand2 and carry flag. Stores the result in operand1."},sidebar:"tutorialSidebar",previous:{title:"Instructions",permalink:"/emu_8086/docs/category/instructions"},next:{title:"AND",permalink:"/emu_8086/docs/Instructions/AND"}},o={},m=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Example",id:"example",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register, Register Addressing",id:"register-register-addressing",level:3},{value:"Register, Immediate Value Addressing",id:"register-immediate-value-addressing",level:3},{value:"Register, Direct Memory Addressing",id:"register-direct-memory-addressing",level:3},{value:"Register, Direct/Indirect Memory Addressing With (or) Without Displacement",id:"register-directindirect-memory-addressing-with-or-without-displacement",level:3},{value:"Direct/Indirect Memory Addressing With (or) Without Displacement , Register Addressing",id:"directindirect-memory-addressing-with-or-without-displacement--register-addressing",level:3},{value:"Direct/Indirect, Immediate Value Addressing",id:"directindirect-immediate-value-addressing",level:3},{value:"Indirect Memory Addressing With (or) Without Displacement, Immediate Value Addressing",id:"indirect-memory-addressing-with-or-without-displacement-immediate-value-addressing",level:3}],l=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,d.kt)("div",t)},g=l("FlagsChangedTable"),c=l("RegisterAddressingMode"),u=l("ImmediateAddressingMode"),p=l("MemoryAddressingMode"),A=l("RegisterAndMemoryAddressing"),y=l("MemoryAndRegisterAddressing"),h=l("DirectMemoryAndImmediateAddressing"),k=l("IndirectMemoryAndImmediateAddressing"),N={toc:m},v="wrapper";function D(e){let{components:t,...r}=e;return(0,d.kt)(v,(0,i.Z)({},N,r,{components:t,mdxType:"MDXLayout"}),(0,d.kt)("h2",{id:"syntax"},"Syntax"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-asm6502"},"ADC operand1, operand2\n")),(0,d.kt)("h2",{id:"attributes"},"Attributes"),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,d.kt)("th",{parentName:"tr",align:null},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:null},(0,d.kt)("strong",{parentName:"td"},"Operands")),(0,d.kt)("td",{parentName:"tr",align:null},"The first operand must be a register or a memory location. The second operand can be a register, a memory location or an immediate value.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:null},(0,d.kt)("strong",{parentName:"td"},"Operation")),(0,d.kt)("td",{parentName:"tr",align:null},(0,d.kt)("inlineCode",{parentName:"td"},"operand1 = operand1 + (operand2 + carry flag)"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:null},(0,d.kt)("strong",{parentName:"td"},"Size")),(0,d.kt)("td",{parentName:"tr",align:null},"2 to 6 bytes")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:null},(0,d.kt)("strong",{parentName:"td"},"Action")),(0,d.kt)("td",{parentName:"tr",align:null},"Performs addition of operand1, operand2 and carry flag. Stores the result in operand1.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:null},(0,d.kt)("strong",{parentName:"td"},"Flags")),(0,d.kt)("td",{parentName:"tr",align:null},(0,d.kt)(g,{carryFlag:"changed",overflowFlag:"changed",zeroFlag:"changed",signFlag:"changed",parityFlag:"changed",auxiliaryCarryFlag:"changed",mdxType:"FlagsChangedTable"}))))),(0,d.kt)("h2",{id:"example"},"Example"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-asm6502"},"MOV AX, 0x0A\nMOV BX, 0x0B\nADC AX, BX ; AX = AX + BX + CF = 0x0A + 0x0B + 0x00 = 0x15\n")),(0,d.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,d.kt)("h3",{id:"register-register-addressing"},"Register, Register Addressing"),(0,d.kt)(c,{instructionName:"XOR",mdxType:"RegisterAddressingMode"}),(0,d.kt)("h3",{id:"register-immediate-value-addressing"},"Register, Immediate Value Addressing"),(0,d.kt)(u,{instructionName:"XOR",mdxType:"ImmediateAddressingMode"}),(0,d.kt)("h3",{id:"register-direct-memory-addressing"},"Register, Direct Memory Addressing"),(0,d.kt)(p,{instructionName:"XOR",mdxType:"MemoryAddressingMode"}),(0,d.kt)("h3",{id:"register-directindirect-memory-addressing-with-or-without-displacement"},"Register, Direct/Indirect Memory Addressing With (or) Without Displacement"),(0,d.kt)(A,{instructionName:"XOR",mdxType:"RegisterAndMemoryAddressing"}),(0,d.kt)("h3",{id:"directindirect-memory-addressing-with-or-without-displacement--register-addressing"},"Direct/Indirect Memory Addressing With (or) Without Displacement , Register Addressing"),(0,d.kt)(y,{instructionName:"XOR",mdxType:"MemoryAndRegisterAddressing"}),(0,d.kt)("h3",{id:"directindirect-immediate-value-addressing"},"Direct/Indirect, Immediate Value Addressing"),(0,d.kt)(h,{instructionName:"XOR",mdxType:"DirectMemoryAndImmediateAddressing"}),(0,d.kt)("h3",{id:"indirect-memory-addressing-with-or-without-displacement-immediate-value-addressing"},"Indirect Memory Addressing With (or) Without Displacement, Immediate Value Addressing"),(0,d.kt)(k,{instructionName:"XOR",mdxType:"IndirectMemoryAndImmediateAddressing"}))}D.isMDXComponent=!0}}]);