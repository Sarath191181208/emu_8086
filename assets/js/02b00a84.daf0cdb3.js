"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4474],{5172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=n(7462),s=(n(7294),n(3905));const r={title:"MOV",description:"Copies operand2 into operand1."},d=void 0,i={unversionedId:"Instructions/MOV",id:"Instructions/MOV",title:"MOV",description:"Copies operand2 into operand1.",source:"@site/docs/Instructions/MOV.md",sourceDirName:"Instructions",slug:"/Instructions/MOV",permalink:"/emu_8086/docs/Instructions/MOV",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/MOV.md",tags:[],version:"current",frontMatter:{title:"MOV",description:"Copies operand2 into operand1."},sidebar:"tutorialSidebar",previous:{title:"LES",permalink:"/emu_8086/docs/Instructions/LES"},next:{title:"OR",permalink:"/emu_8086/docs/Instructions/OR"}},o={},l=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register Addressing Mode",id:"register-addressing-mode",level:3},{value:"Immediate Addressing Mode",id:"immediate-addressing-mode",level:3},{value:"Direct Addressing Mode",id:"direct-addressing-mode",level:3},{value:"Register Indirect Addressing Mode",id:"register-indirect-addressing-mode",level:3},{value:"Base-Plus-Index Addressing Mode",id:"base-plus-index-addressing-mode",level:3},{value:"Base-Plus-Index-Plus-Displacement Addressing Mode",id:"base-plus-index-plus-displacement-addressing-mode",level:3}],p={toc:l},m="wrapper";function u(e){let{components:t,...n}=e;return(0,s.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"syntax"},"Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-asm6502"},"MOV operand1, operand2\n")),(0,s.kt)("h2",{id:"attributes"},"Attributes"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Size")),(0,s.kt)("td",{parentName:"tr",align:null},"Byte, Word, or Doubleword.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Operands")),(0,s.kt)("td",{parentName:"tr",align:null},"The destination operand is a general-purpose register or memory location. The source operand is a general-purpose register, memory location, or immediate value.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Action")),(0,s.kt)("td",{parentName:"tr",align:null},"Copies the source operand (second operand) to the destination operand (first operand).")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Flags")),(0,s.kt)("td",{parentName:"tr",align:null},"No Flags are changed")))),(0,s.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,s.kt)("h3",{id:"register-addressing-mode"},"Register Addressing Mode"),(0,s.kt)("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, BX\nMOV BL, CH\n")),(0,s.kt)("h3",{id:"immediate-addressing-mode"},"Immediate Addressing Mode"),(0,s.kt)("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, 1234H\nMOV BL, 12H\n")),(0,s.kt)("h3",{id:"direct-addressing-mode"},"Direct Addressing Mode"),(0,s.kt)("p",null,"This is a mode in which the address of the operand is specified in the instruction itself. The operand is located in the memory. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, [1234H]\nMOV CL, [1234H]\n")),(0,s.kt)("p",null,"or equivalently"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-asm"},"org 100h \n.data \n    Var1 dw 1234H\ncode: \n    MOV AX, Var1\n")),(0,s.kt)("h3",{id:"register-indirect-addressing-mode"},"Register Indirect Addressing Mode"),(0,s.kt)("p",null,"This is a mode in which the address of the operand is contained in the register specified in the instruction. The operand is located in the memory. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, [BX]\n")),(0,s.kt)("h3",{id:"base-plus-index-addressing-mode"},"Base-Plus-Index Addressing Mode"),(0,s.kt)("p",null,"This is a mode in which the address of the operand is specified by the sum of a base register and an index register. The operand is located in the memory. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, [BX+SI]\n")),(0,s.kt)("h3",{id:"base-plus-index-plus-displacement-addressing-mode"},"Base-Plus-Index-Plus-Displacement Addressing Mode"),(0,s.kt)("p",null,"This is a mode in which the address of the operand is specified by the sum of a base register, an index register, and a displacement. The operand is located in the memory. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-asm"},"MOV AX, [BX+SI+1234H]\n")))}u.isMDXComponent=!0}}]);