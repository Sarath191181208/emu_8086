"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5346],{5389:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),i=n(7898);const o={title:"LEA",description:"Loads the Effective address of the source operand into the destination register."},s=void 0,d={unversionedId:"Instructions/LEA",id:"Instructions/LEA",title:"LEA",description:"Loads the Effective address of the source operand into the destination register.",source:"@site/docs/Instructions/LEA.mdx",sourceDirName:"Instructions",slug:"/Instructions/LEA",permalink:"/emu_8086/docs/Instructions/LEA",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/LEA.mdx",tags:[],version:"current",frontMatter:{title:"LEA",description:"Loads the Effective address of the source operand into the destination register."},sidebar:"tutorialSidebar",previous:{title:"CMP",permalink:"/emu_8086/docs/Instructions/CMP"},next:{title:"LES",permalink:"/emu_8086/docs/Instructions/LES"}},l={},p=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register And Memory",id:"register-and-memory",level:3}],u={toc:p},m="wrapper";function c(t){let{components:e,...n}=t;return(0,a.kt)(m,(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-asm6502"},"LEA operand1, operand2 ; comment\n")),(0,a.kt)("h2",{id:"attributes"},"Attributes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Operands")),(0,a.kt)("td",{parentName:"tr",align:null},"The first operand is the destination register. The second operand is the source operand. operand1: Register, operand2: Memory")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Size")),(0,a.kt)("td",{parentName:"tr",align:null},"Word")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Action")),(0,a.kt)("td",{parentName:"tr",align:null},"Performs a memory indirect addressing operation. The effective address of the source operand is loaded into the destination register.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Flags")),(0,a.kt)("td",{parentName:"tr",align:null},"None")))),(0,a.kt)("admonition",{title:"INFO",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For instructions such as ",(0,a.kt)("inlineCode",{parentName:"p"},"LEA AX, [0x100]")," (or) ",(0,a.kt)("inlineCode",{parentName:"p"},"LEA SP, Var")," the assembler will convert the instruction to ",(0,a.kt)("inlineCode",{parentName:"p"},"MOV AX, 0x100")," (or) ",(0,a.kt)("inlineCode",{parentName:"p"},"MOV SP, Var")," respectively.\nThis is because the ",(0,a.kt)("inlineCode",{parentName:"p"},"MOV")," instruction is much more efficient than the ",(0,a.kt)("inlineCode",{parentName:"p"},"LEA")," instruction.")),(0,a.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,a.kt)("h3",{id:"register-and-memory"},"Register And Memory"),(0,a.kt)(i.W7,{instructionName:"LEA",mdxType:"RegisterAndMemoryAddressing"}))}c.isMDXComponent=!0}}]);