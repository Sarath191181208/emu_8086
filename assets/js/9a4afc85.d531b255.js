"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5658],{1422:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var r=a(7462),n=(a(7294),a(3905));const i={authors:{name:"Vangipuram Srinivasa Sarath Chandra",title:"Tech enthusiast",url:"https://github.com/Sarath191181208",image_url:"https://avatars.githubusercontent.com/u/74459981?v=4"}},o="\ud83d\udee0\ufe0f Refactor: moved common logic into a pattern",s={permalink:"/emu_8086/blog/2023/10/29/",editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/blog/2023-10-29.mdx",source:"@site/blog/2023-10-29.mdx",title:"\ud83d\udee0\ufe0f Refactor: moved common logic into a pattern",description:"For instruction like TEST, AND, MOV, ADD ... etc. All of these follow a single pattern for their compliation step example",date:"2023-10-29T00:00:00.000Z",formattedDate:"October 29, 2023",tags:[],readingTime:.6,hasTruncateMarker:!1,authors:[{name:"Vangipuram Srinivasa Sarath Chandra",title:"Tech enthusiast",url:"https://github.com/Sarath191181208",image_url:"https://avatars.githubusercontent.com/u/74459981?v=4",imageURL:"https://avatars.githubusercontent.com/u/74459981?v=4"}],frontMatter:{authors:{name:"Vangipuram Srinivasa Sarath Chandra",title:"Tech enthusiast",url:"https://github.com/Sarath191181208",image_url:"https://avatars.githubusercontent.com/u/74459981?v=4",imageURL:"https://avatars.githubusercontent.com/u/74459981?v=4"}},prevItem:{title:"Support for and instruction compilation",permalink:"/emu_8086/blog/2023/10/30/"},nextItem:{title:"Blog CI + Indiviaual Byte/Word Indexing work",permalink:"/emu_8086/blog/2023/10/28/"}},l={authorsImageUrls:[void 0]},m=[],u={toc:m},p="wrapper";function c(t){let{components:e,...a}=t;return(0,n.kt)(p,(0,r.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"For instruction like ",(0,n.kt)("inlineCode",{parentName:"p"},"TEST"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"AND"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"MOV"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"ADD")," ... etc. All of these follow a single pattern for their compliation step example "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-asm6502",metastring:"showLineNumbers",showLineNumbers:!0},"MOV AX, BX ; 0x8B 0xC3 \nTEST AX, BX ; 0x85 0xC3 \n\nMOV AX, [BX] ; 0x8B 0x07\nTEST AX, [BX] ; 0x85 0x07\n\nMOV AX, [BX+SI] ; 0x8B 0x00\nTEST AX, [BX+SI] ; 0x85 0x00\n\nMOV AX, [BX+SI+0x1234] ; 0x8B 0x84 0x34 0x12\nTEST AX, [BX+SI+0x1234] ; 0x85 0x84 0x34 0x12\n")),(0,n.kt)("p",null,"Here 0x8B is the root ins (or) in other words MOV and 0xC3 represents the registers.\nAll of these instructions fowllow this pattern therefore the logic is sent into a sperate file called ",(0,n.kt)("inlineCode",{parentName:"p"},"src-tauri\\src\\compiler\\parsers\\pattern_extractors\\compile_first_ins_reg_pattern.rs")," and the functions are as follows "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"parse_8bitreg_first_addr_mode")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"parse_16bitreg_first_addr_mode"))))}c.isMDXComponent=!0}}]);