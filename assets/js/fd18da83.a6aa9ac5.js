"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[934],{123:(e,t,n)=>{n.r(t),n.d(t,{Highlight2:()=>y,assets:()=>x,contentTitle:()=>N,default:()=>v,frontMatter:()=>b,metadata:()=>T,toc:()=>k});var a=n(7462),r=n(7294),l=n(3905);const s={tooltip:"tooltip_OfI_",tooltiptext:"tooltiptext_kMd9",bottomTooltiptext:"bottomTooltiptext_PBXK"};function i(e){let{children:t,text:n,toolTipPosition:a="top"}=e;const l="top"===a?s.tooltiptext:s.bottomTooltiptext;return r.createElement("div",{className:s.tooltip},t,r.createElement("span",{className:l},n))}const d=e=>{let{state:t}=e;return"changed"===t?r.createElement("span",{className:"badge badge--primary badge--rounded h-20"},r.createElement("span",{className:"badge__text"},r.createElement(i,{text:"Changes"},"C"))):"unchanged"===t?r.createElement("span",{className:"badge badge--secondary badge--rounded"},r.createElement("span",{className:"badge__text"},r.createElement(i,{text:"Doesn't change"},"NC"))):1==t?r.createElement("span",{className:"badge badge--success badge--rounded"},r.createElement("span",{className:"badge__text"},r.createElement(i,{text:"Changed to 1"},"1"))):0==t?r.createElement("span",{className:"badge badge--danger badge--rounded"},r.createElement("span",{className:"badge__text"},r.createElement(i,{text:"Changed to 0"},"0"))):r.createElement("span",{className:"badge badge--warning badge--rounded"},r.createElement("span",{className:"badge__text"},"Unknown"))};function o(e){let{carryFlag:t=null,zeroFlag:n=null,signFlag:a=null,overflowFlag:l=null,parityFlag:s=null,auxiliaryCarryFlag:o=null}=e;const m={carryFlag:t,zeroFlag:n,signFlag:a,overflowFlag:l,parityFlag:s,auxiliaryCarryFlag:o};return r.createElement("table",{className:"table table--striped table--responsive"},r.createElement("thead",null,r.createElement("tr",null,Object.entries(m).map((e=>{let[t,n]=e;return null==n?null:r.createElement("th",null,r.createElement(i,{text:t,toolTipPosition:"bottom"},t[0].toUpperCase()))})))),r.createElement("tbody",null,r.createElement("tr",null,Object.values(m).map((e=>null==e?null:r.createElement("td",null,r.createElement(d,{state:e})))))))}var m=n(614);function c(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is either a general-purpose register or a segment register."),r.createElement("p",null,"Example:"),r.createElement(m.Z,{language:"asm6502"},e.instructionName," AX, BX ",r.createElement("br",null),e.instructionName," BL, CH"),r.createElement("hr",null))}function u(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a constant."),r.createElement("p",null,"Example:"),r.createElement(m.Z,{language:"asm6502"},e.instructionName," AX, 0FFh ",r.createElement("br",null),e.instructionName," BX, 0Bh ",r.createElement("br",null),e.instructionName," CL, 0h"),r.createElement("hr",null))}function p(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location."),r.createElement("p",null,"Example:"),r.createElement(m.Z,{language:"asm6502"},e.instructionName," AX, [0x100] ",r.createElement("br",null),e.instructionName," AL, b.[0x100] ",r.createElement("br",null)),"(or) Alternatively you can specify the memory location using the `variable assignment`",r.createElement("p",null,"Example"),r.createElement(m.Z,{language:"asm6502"},"ORG 100h ",r.createElement("br",null),".DATA ",r.createElement("br",null),"    VAR1 DB 0FFh"," ",r.createElement("br",null),"    VAR2 DW 0Bh"," ",r.createElement("br",null)," ",r.createElement("br",null),"CODE: ",r.createElement("br",null),`    ${e.instructionName} AL, Var1`," ",r.createElement("br",null),`    ${e.instructionName} BX, Var2`," ",r.createElement("br",null),`    ${e.instructionName} CL, b.[Var2]`," ",r.createElement("br",null),`    ${e.instructionName} DX, w.[Var1]`," ",r.createElement("br",null)),r.createElement("hr",null))}function g(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register."),r.createElement("p",null,"Example:"),r.createElement(m.Z,{language:"asm6502"},e.instructionName," AX, [BX] ",r.createElement("br",null),e.instructionName," AL, b.[BX] ",r.createElement("br",null)),r.createElement("hr",null))}function E(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset."),r.createElement("p",null,"Example:"),r.createElement(m.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI] ",r.createElement("br",null)),r.createElement("hr",null))}function h(e){return r.createElement(r.Fragment,null,r.createElement("p",null,"This is a mode in which the operand is specified in the instruction itself. The operand is a memory location whose address is contained in a register and an offset and a displacement."),r.createElement("p",null,"Example:"),r.createElement(m.Z,{language:"asm6502"},e.instructionName," AX, [BX+SI+10h] ",r.createElement("br",null),e.instructionName," AX, [BX+SI+100h] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI+10h] ",r.createElement("br",null),e.instructionName," AL, b.[BX+SI+100h] ",r.createElement("br",null)),r.createElement("hr",null))}const b={title:"TEST",description:"Performs a bitwise AND operation on the two operands."},N=void 0,T={unversionedId:"Instructions/TEST",id:"Instructions/TEST",title:"TEST",description:"Performs a bitwise AND operation on the two operands.",source:"@site/docs/Instructions/TEST.mdx",sourceDirName:"Instructions",slug:"/Instructions/TEST",permalink:"/emu_8086/docs/Instructions/TEST",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/TEST.mdx",tags:[],version:"current",frontMatter:{title:"TEST",description:"Performs a bitwise AND operation on the two operands."},sidebar:"tutorialSidebar",previous:{title:"MOV",permalink:"/emu_8086/docs/Instructions/MOV"},next:{title:"Tutorial - Extras",permalink:"/emu_8086/docs/category/tutorial---extras"}},x={},k=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register Addressing",id:"register-addressing",level:3},{value:"Immediate Addressing Mode",id:"immediate-addressing-mode",level:3},{value:"MemoryAddressingMode",id:"memoryaddressingmode",level:3},{value:"RegisterIndirectAddressingMode",id:"registerindirectaddressingmode",level:3},{value:"BasePlusIndexedAddressingMode",id:"baseplusindexedaddressingmode",level:3},{value:"BasePlusIndexPlusDisplacementAddressingMode",id:"baseplusindexplusdisplacementaddressingmode",level:3}],y=e=>{let{children:t,color:n}=e;return(0,l.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},f={toc:k,Highlight2:y},A="wrapper";function v(e){let{components:t,...n}=e;return(0,l.kt)(A,(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"syntax"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-asm6502"},"TEST operand1, operand2\n")),(0,l.kt)("h2",{id:"attributes"},"Attributes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Size")),(0,l.kt)("td",{parentName:"tr",align:null},"Byte, Word, Doubleword, 3 Bytes, 5 Bytes (or) 6 Bytes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Operands")),(0,l.kt)("td",{parentName:"tr",align:null},"The first operand is a general-purpose register or memory location. The second operand is a general-purpose register, memory location, or immediate value.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Action")),(0,l.kt)("td",{parentName:"tr",align:null},"Performs a bitwise AND operation on the two operands. The result is discarded.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Flags")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)(o,{carryFlag:!1,overflowFlag:!1,zeroFlag:"changed",signFlag:"changed",parityFlag:"changed",mdxType:"FlagsChangedTable"}))))),(0,l.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,l.kt)("h3",{id:"register-addressing"},"Register Addressing"),(0,l.kt)(c,{instructionName:"TEST",mdxType:"RegisterAddressingMode"}),(0,l.kt)("h3",{id:"immediate-addressing-mode"},"Immediate Addressing Mode"),(0,l.kt)(u,{instructionName:"TEST",mdxType:"ImmediateAddressingMode"}),(0,l.kt)("h3",{id:"memoryaddressingmode"},"MemoryAddressingMode"),(0,l.kt)(p,{instructionName:"TEST",mdxType:"MemoryAddressingMode"}),(0,l.kt)("h3",{id:"registerindirectaddressingmode"},"RegisterIndirectAddressingMode"),(0,l.kt)(g,{instructionName:"TEST",mdxType:"RegisterIndirectAddressingMode"}),(0,l.kt)("h3",{id:"baseplusindexedaddressingmode"},"BasePlusIndexedAddressingMode"),(0,l.kt)(E,{instructionName:"TEST",mdxType:"BasePlusIndexedAddressingMode"}),(0,l.kt)("h3",{id:"baseplusindexplusdisplacementaddressingmode"},"BasePlusIndexPlusDisplacementAddressingMode"),(0,l.kt)(h,{instructionName:"TEST",mdxType:"BasePlusIndexPlusDisplacementAddressingMode"}))}v.isMDXComponent=!0}}]);