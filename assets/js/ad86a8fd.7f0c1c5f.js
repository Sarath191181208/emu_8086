"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2243],{3749:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294);const s={tooltip:"tooltip_OfI_",tooltiptext:"tooltiptext_kMd9",bottomTooltiptext:"bottomTooltiptext_PBXK"};function r(e){let{children:t,text:a,toolTipPosition:r="top"}=e;const d="top"===r?s.tooltiptext:s.bottomTooltiptext;return n.createElement("div",{className:s.tooltip},t,n.createElement("span",{className:d},a))}const d=e=>{let{state:t}=e;return"changed"===t?n.createElement("span",{className:"badge badge--primary badge--rounded h-20"},n.createElement("span",{className:"badge__text"},n.createElement(r,{text:"Changes"},"C"))):"unchanged"===t?n.createElement("span",{className:"badge badge--secondary badge--rounded"},n.createElement("span",{className:"badge__text"},n.createElement(r,{text:"Doesn't change"},"NC"))):1==t?n.createElement("span",{className:"badge badge--success badge--rounded"},n.createElement("span",{className:"badge__text"},n.createElement(r,{text:"Changed to 1"},"1"))):0==t?n.createElement("span",{className:"badge badge--danger badge--rounded"},n.createElement("span",{className:"badge__text"},n.createElement(r,{text:"Changed to 0"},"0"))):n.createElement("span",{className:"badge badge--warning badge--rounded"},n.createElement("span",{className:"badge__text"},"Unknown"))};function l(e){let{carryFlag:t=null,zeroFlag:a=null,signFlag:s=null,overflowFlag:l=null,parityFlag:i=null,auxiliaryCarryFlag:o=null}=e;const m={carryFlag:t,zeroFlag:a,signFlag:s,overflowFlag:l,parityFlag:i,auxiliaryCarryFlag:o};return n.createElement("table",{className:"table table--striped table--responsive flags_table"},n.createElement("thead",null,n.createElement("tr",null,Object.entries(m).map((e=>{let[t,a]=e;return null==a?null:n.createElement("th",null,n.createElement(r,{text:t,toolTipPosition:"bottom"},t[0].toUpperCase()))})))),n.createElement("tbody",null,n.createElement("tr",null,Object.values(m).map((e=>null==e?null:n.createElement("td",null,n.createElement(d,{state:e})))))))}},9802:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var n=a(7462),s=(a(7294),a(3905)),r=a(3749),d=a(7898);const l={title:"AND",description:"Performs a bitwise AND operation on the two operands and stores the result in first operand."},i=void 0,o={unversionedId:"Instructions/AND",id:"Instructions/AND",title:"AND",description:"Performs a bitwise AND operation on the two operands and stores the result in first operand.",source:"@site/docs/Instructions/AND.mdx",sourceDirName:"Instructions",slug:"/Instructions/AND",permalink:"/emu_8086/docs/Instructions/AND",draft:!1,editUrl:"https://github.com/Sarath191181208/emu_8086/tree/main/docusaurus/docs/Instructions/AND.mdx",tags:[],version:"current",frontMatter:{title:"AND",description:"Performs a bitwise AND operation on the two operands and stores the result in first operand."},sidebar:"tutorialSidebar",previous:{title:"ADC",permalink:"/emu_8086/docs/Instructions/ADC"},next:{title:"CMP",permalink:"/emu_8086/docs/Instructions/CMP"}},m={},u=[{value:"Syntax",id:"syntax",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Supported Modes",id:"supported-modes",level:2},{value:"Register Addressing",id:"register-addressing",level:3},{value:"Immediate Addressing Mode",id:"immediate-addressing-mode",level:3},{value:"MemoryAddressingMode",id:"memoryaddressingmode",level:3},{value:"RegisterIndirectAddressingMode",id:"registerindirectaddressingmode",level:3},{value:"BasePlusIndexedAddressingMode",id:"baseplusindexedaddressingmode",level:3},{value:"BasePlusIndexPlusDisplacementAddressingMode",id:"baseplusindexplusdisplacementaddressingmode",level:3}],p={toc:u},g="wrapper";function c(e){let{components:t,...a}=e;return(0,s.kt)(g,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"syntax"},"Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-asm6502"},"AND operand1, operand2\n")),(0,s.kt)("h2",{id:"attributes"},"Attributes"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Size")),(0,s.kt)("td",{parentName:"tr",align:null},"Byte, Word, Doubleword, 3 Bytes, 5 Bytes (or) 6 Bytes")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Operands")),(0,s.kt)("td",{parentName:"tr",align:null},"The first operand is a general-purpose register or memory location. The second operand is a general-purpose register, memory location, or immediate value.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Action")),(0,s.kt)("td",{parentName:"tr",align:null},"Performs a bitwise AND operation on the two operands. The result is saved in first operand.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Flags")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)(r.Z,{carryFlag:!1,overflowFlag:!1,zeroFlag:"changed",signFlag:"changed",parityFlag:"changed",mdxType:"FlagsChangedTable"}))))),(0,s.kt)("h2",{id:"supported-modes"},"Supported Modes"),(0,s.kt)("h3",{id:"register-addressing"},"Register Addressing"),(0,s.kt)(d.VY,{instructionName:"AND",mdxType:"RegisterAddressingMode"}),(0,s.kt)("h3",{id:"immediate-addressing-mode"},"Immediate Addressing Mode"),(0,s.kt)(d.vR,{instructionName:"AND",mdxType:"ImmediateAddressingMode"}),(0,s.kt)("h3",{id:"memoryaddressingmode"},"MemoryAddressingMode"),(0,s.kt)(d.PM,{instructionName:"AND",mdxType:"MemoryAddressingMode"}),(0,s.kt)("h3",{id:"registerindirectaddressingmode"},"RegisterIndirectAddressingMode"),(0,s.kt)(d.mL,{instructionName:"AND",mdxType:"RegisterIndirectAddressingMode"}),(0,s.kt)("h3",{id:"baseplusindexedaddressingmode"},"BasePlusIndexedAddressingMode"),(0,s.kt)(d.Py,{instructionName:"AND",mdxType:"BasePlusIndexedAddressingMode"}),(0,s.kt)("h3",{id:"baseplusindexplusdisplacementaddressingmode"},"BasePlusIndexPlusDisplacementAddressingMode"),(0,s.kt)(d.lh,{instructionName:"AND",mdxType:"BasePlusIndexPlusDisplacementAddressingMode"}))}c.isMDXComponent=!0}}]);